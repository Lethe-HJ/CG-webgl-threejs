{
    "cells": [
        {
            "language": "markdown",
            "source": [
                "### 374. 猜数字大小\r\n\r\n猜数字游戏的规则如下：\r\n\r\n每轮游戏，我都会从 1 到 n 随机选择一个数字。 请你猜选出的是哪个数字。\r\n如果你猜错了，我会告诉你，你猜测的数字比我选出的数字是大了还是小了。\r\n你可以通过调用一个预先定义好的接口 int guess(int num) 来获取猜测结果，返回值一共有 3 种可能的情况（-1，1 或 0）：\r\n\r\n-1：我选出的数字比你猜的数字小 pick < num\r\n1：我选出的数字比你猜的数字大 pick > num\r\n0：我选出的数字和你猜的数字一样。恭喜！你猜对了！pick == num\r\n返回我选出的数字。\r\n\r\n示例 1：\r\n\r\n输入：n = 10, pick = 6\r\n输出：6\r\n示例 2：\r\n\r\n输入：n = 1, pick = 1\r\n输出：1\r\n示例 3：\r\n\r\n输入：n = 2, pick = 1\r\n输出：1\r\n示例 4：\r\n\r\n输入：n = 2, pick = 2\r\n输出：2\r\n\r\n提示：\r\n\r\n1 <= n <= 231 - 1\r\n1 <= pick <= n\r\n\r\n```js\r\n/**\r\n * Forward declaration of guess API.\r\n * @param {number} num   your guess\r\n * @return \t     -1 if num is higher than the picked number\r\n *\t\t\t      1 if num is lower than the picked number\r\n *               otherwise return 0\r\n * var guess = function(num) {}\r\n */\r\n\r\n/**\r\n * @param {number} n\r\n * @return {number}\r\n */\r\nvar guessNumber = function (n) {\r\n  const rec = (low, high) => {\r\n    if (low > high) return;\r\n    const mid = Math.floor((low + high) / 2);\r\n    const res = guess(mid);\r\n    if (res === 0) return mid;\r\n    else if (res === 1) return rec(mid + 1, high);\r\n    else return rec(1, mid - 1);\r\n  };\r\n  return rec(1, n);\r\n};\r\n```\r\n"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "226. 翻转二叉树\r\n简单\r\n相关标签\r\n相关企业\r\n给你一棵二叉树的根节点 root ，翻转这棵二叉树，并返回其根节点。\r\n\r\n \r\n\r\n示例 1：\r\n\r\n\r\n\r\n输入：root = [4,2,7,1,3,6,9]\r\n输出：[4,7,2,9,6,3,1]\r\n示例 2：\r\n\r\n\r\n\r\n输入：root = [2,1,3]\r\n输出：[2,3,1]\r\n示例 3：\r\n\r\n输入：root = []\r\n输出：[]\r\n \r\n\r\n提示：\r\n\r\n树中节点数目范围在 [0, 100] 内\r\n-100 <= Node.val <= 100\r\n\r\n\r\n```js\r\n/**\r\n * Definition for a binary tree node.\r\n * function TreeNode(val, left, right) {\r\n *     this.val = (val===undefined ? 0 : val)\r\n *     this.left = (left===undefined ? null : left)\r\n *     this.right = (right===undefined ? null : right)\r\n * }\r\n */\r\n/**\r\n * @param {TreeNode} root\r\n * @return {TreeNode}\r\n */\r\nvar invertTree = function(root) {\r\n\r\n};\r\n\r\n```\r\n\r\n![alt text](image.png)"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "100. 相同的树\r\n已解答\r\n简单\r\n相关标签\r\n相关企业\r\n给你两棵二叉树的根节点 p 和 q ，编写一个函数来检验这两棵树是否相同。\r\n\r\n如果两个树在结构上相同，并且节点具有相同的值，则认为它们是相同的。\r\n\r\n \r\n\r\n示例 1：\r\n\r\n\r\n输入：p = [1,2,3], q = [1,2,3]\r\n输出：true\r\n示例 2：\r\n\r\n\r\n输入：p = [1,2], q = [1,null,2]\r\n输出：false\r\n示例 3：\r\n\r\n\r\n输入：p = [1,2,1], q = [1,1,2]\r\n输出：false\r\n \r\n\r\n提示：\r\n\r\n两棵树上的节点数目都在范围 [0, 100] 内\r\n-104 <= Node.val <= 104\r\n\r\n```js\r\n/**\r\n * Definition for a binary tree node.\r\n * function TreeNode(val, left, right) {\r\n *     this.val = (val===undefined ? 0 : val)\r\n *     this.left = (left===undefined ? null : left)\r\n *     this.right = (right===undefined ? null : right)\r\n * }\r\n */\r\n/**\r\n * @param {TreeNode} p\r\n * @param {TreeNode} q\r\n * @return {boolean}\r\n */\r\nvar isSameTree = function(p, q) {\r\n\r\n};\r\n```\r\n![alt text](image-1.png)"
            ],
            "outputs": []
        }
    ]
}