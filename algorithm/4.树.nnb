{
    "cells": [
        {
            "language": "markdown",
            "source": [
                "## 广度优先遍历\r\n\r\n```js\r\nconst tree = {\r\n  val: \"a\",\r\n  children: [\r\n    {\r\n      val: \"b\",\r\n      children: [\r\n        {\r\n          val: \"d\",\r\n          children: [],\r\n        },\r\n        {\r\n          val: \"e\",\r\n          children: [],\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      val: \"c\",\r\n      children: [\r\n        {\r\n          val: \"f\",\r\n          children: [],\r\n        },\r\n        {\r\n          val: \"g\",\r\n          children: [],\r\n        },\r\n      ],\r\n    },\r\n  ],\r\n};\r\n\r\nconst bfs = (root) => {\r\n  const q = [root];\r\n  while (q.length > 0) {\r\n    const n = q.shift();\r\n    console.log(n.val);\r\n    n.children.forEach((child) => {\r\n      q.push(child);\r\n    });\r\n  }\r\n};\r\n\r\nbfs(tree);\r\n```\r\n"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "## 深度优先遍历\r\n\r\n```js\r\nconst tree = {\r\n    val: 'a',\r\n    children: [\r\n        {\r\n            val: 'b',\r\n            children: [\r\n                {\r\n                    val: 'd',\r\n                    children: [],\r\n                },\r\n                {\r\n                    val: 'e',\r\n                    children: [],\r\n                }\r\n            ],\r\n        },\r\n        {\r\n            val: 'c',\r\n            children: [\r\n                {\r\n                    val: 'f',\r\n                    children: [],\r\n                },\r\n                {\r\n                    val: 'g',\r\n                    children: [],\r\n                }\r\n            ],\r\n        }\r\n    ],\r\n};\r\n\r\nconst dfs = (root) => {\r\n    console.log(root.val);\r\n    root.children.forEach(dfs);\r\n};\r\n\r\ndfs(tree);\r\n```"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "## 先中后序遍历\r\n\r\n\r\n```js\r\nconst bt = {\r\n  val: 1,\r\n  left: {\r\n    val: 2,\r\n    left: {\r\n      val: 4,\r\n      left: null,\r\n      right: null,\r\n    },\r\n    right: {\r\n      val: 5,\r\n      left: null,\r\n      right: null,\r\n    },\r\n  },\r\n  right: {\r\n    val: 3,\r\n    left: {\r\n      val: 6,\r\n      left: null,\r\n      right: null,\r\n    },\r\n    right: {\r\n      val: 7,\r\n      left: null,\r\n      right: null,\r\n    },\r\n  },\r\n};\r\n\r\nconst preorder = (root) => {\r\n    if (!root) { return; }\r\n    console.log(root.val);\r\n    preorder(root.left);\r\n    preorder(root.right);\r\n};\r\n\r\npreorder(bt);\r\n\r\nconst postorder = (root) => {\r\n    if (!root) { return; }\r\n    postorder(root.left);\r\n    postorder(root.right);\r\n    console.log(root.val);\r\n};\r\n\r\npostorder(bt);\r\n\r\nconst inorder = (root) => {\r\n    if (!root) { return; }\r\n    inorder(root.left);\r\n    console.log(root.val);\r\n    inorder(root.right);\r\n};\r\ninorder(bt);\r\n```\r\n"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "## 题目 104. 二叉树的最大深度\r\n\r\n给定一个二叉树 root ，返回其最大深度。\r\n\r\n二叉树的 最大深度 是指从根节点到最远叶子节点的最长路径上的节点数。\r\n\r\n示例 1：\r\n\r\n输入：root = [3,9,20,null,null,15,7]\r\n输出：3\r\n示例 2：\r\n\r\n输入：root = [1,null,2]\r\n输出：2\r\n\r\n提示：\r\n\r\n树中节点的数量在 [0, 104] 区间内。\r\n-100 <= Node.val <= 100\r\n\r\n```js\r\n/**\r\n * Definition for a binary tree node.\r\n * function TreeNode(val, left, right) {\r\n *     this.val = (val===undefined ? 0 : val)\r\n *     this.left = (left===undefined ? null : left)\r\n *     this.right = (right===undefined ? null : right)\r\n * }\r\n */\r\n/**\r\n * @param {TreeNode} root\r\n * @return {number}\r\n */\r\nvar maxDepth = function (root) {\r\n  let res = 0;\r\n  const dfs = (n, l) => {\r\n    if (!n) return;\r\n    if (!n.left && !n.right) {\r\n      res = Math.max(res, 1);\r\n    }\r\n    dfs(n.left, l + 1);\r\n    dfs(n.right, l + 1);\r\n  };\r\n  dfs(root, 1);\r\n  return res;\r\n};\r\n```\r\n"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "### 题目 111. 二叉树的最小深度\r\n\r\n给定一个二叉树，找出其最小深度。\r\n\r\n最小深度是从根节点到最近叶子节点的最短路径上的节点数量。\r\n\r\n说明：叶子节点是指没有子节点的节点。\r\n\r\n示例 1：\r\n\r\n输入：root = [3,9,20,null,null,15,7]\r\n输出：2\r\n示例 2：\r\n\r\n输入：root = [2,null,3,null,4,null,5,null,6]\r\n输出：5\r\n\r\n提示：\r\n\r\n树中节点数的范围在 [0, 105] 内\r\n-1000 <= Node.val <= 1000\r\n\r\n```js\r\n/**\r\n * Definition for a binary tree node.\r\n * function TreeNode(val, left, right) {\r\n *     this.val = (val===undefined ? 0 : val)\r\n *     this.left = (left===undefined ? null : left)\r\n *     this.right = (right===undefined ? null : right)\r\n * }\r\n */\r\n/**\r\n * @param {TreeNode} root\r\n * @return {number}\r\n */\r\nvar minDepth = function (root) {\r\n  if (!root) return 0;\r\n  const q = [[root, 1]];\r\n  while (q.length) {\r\n    const [n, l] = q.shift();\r\n    if (!n.left && !n.right) return 1;\r\n    if (n.left) q.push([n.left, l + 1]);\r\n    if (n.right) q.push([n.right, l + 1]);\r\n  }\r\n};\r\n```\r\n"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "### 题目 102. 二叉树的层序遍历\r\n\r\n给你二叉树的根节点 root ，返回其节点值的 层序遍历 。 （即逐层地，从左到右访问所有节点）。\r\n\r\n示例 1：\r\n\r\n输入：root = [3,9,20,null,null,15,7]\r\n输出：[[3],[9,20],[15,7]]\r\n示例 2：\r\n\r\n输入：root = [1]\r\n输出：[[1]]\r\n示例 3：\r\n\r\n输入：root = []\r\n输出：[]\r\n\r\n提示：\r\n\r\n树中节点数目在范围 [0, 2000] 内\r\n-1000 <= Node.val <= 1000\r\n\r\n```js\r\n/**\r\n * Definition for a binary tree node.\r\n * function TreeNode(val, left, right) {\r\n *     this.val = (val===undefined ? 0 : val)\r\n *     this.left = (left===undefined ? null : left)\r\n *     this.right = (right===undefined ? null : right)\r\n * }\r\n */\r\n/**\r\n * @param {TreeNode} root\r\n * @return {number[][]}\r\n */\r\nvar levelOrder = function (root) {\r\n  if (!root) return [];\r\n  const q = [root];\r\n  const res = [];\r\n  while (q.length) {\r\n    let len = q.length;\r\n    res.push([]);\r\n    while (len--) {\r\n      const n = q.shift();\r\n      res[res.length - 1].push(n.val);\r\n      if (n.left) q.push(n.left);\r\n      if (n.right) q.push(n.right);\r\n    }\r\n  }\r\n  return res;\r\n};\r\n```\r\n"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "### 题目 94. 二叉树的中序遍历\r\n\r\n给定一个二叉树的根节点 root ，返回 它的 中序 遍历 。\r\n\r\n示例 1：\r\n\r\n输入：root = [1,null,2,3]\r\n输出：[1,3,2]\r\n示例 2：\r\n\r\n输入：root = []\r\n输出：[]\r\n示例 3：\r\n\r\n输入：root = [1]\r\n输出：[1]\r\n\r\n提示：\r\n\r\n树中节点数目在范围 [0, 100] 内\r\n-100 <= Node.val <= 100\r\n\r\n```js\r\n/**\r\n * Definition for a binary tree node.\r\n * function TreeNode(val, left, right) {\r\n *     this.val = (val===undefined ? 0 : val)\r\n *     this.left = (left===undefined ? null : left)\r\n *     this.right = (right===undefined ? null : right)\r\n * }\r\n */\r\n/**\r\n * @param {TreeNode} root\r\n * @return {number[]}\r\n */\r\nvar inorderTraversal = function (root) {\r\n  const res = [];\r\n  const stack = [];\r\n  let p = root;\r\n  while (stack.length || p) {\r\n    while (p) {\r\n      stack.push(p);\r\n      p = p.left;\r\n    }\r\n    const n = stack.pop();\r\n    res.push(n.val);\r\n    p = n.right;\r\n  }\r\n  return res;\r\n};\r\n```\r\n"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "### 题目 112. 路径总和\r\n\r\n给你二叉树的根节点 root 和一个表示目标和的整数 targetSum 。判断该树中是否存在 根节点到叶子节点 的路径，这条路径上所有节点值相加等于目标和 targetSum 。如果存在，返回 true ；否则，返回 false 。\r\n\r\n叶子节点 是指没有子节点的节点。\r\n\r\n示例 1：\r\n\r\n输入：root = [5,4,8,11,null,13,4,7,2,null,null,null,1], targetSum = 22\r\n输出：true\r\n解释：等于目标和的根节点到叶节点路径如上图所示。\r\n示例 2：\r\n\r\n输入：root = [1,2,3], targetSum = 5\r\n输出：false\r\n解释：树中存在两条根节点到叶子节点的路径：\r\n(1 --> 2): 和为 3\r\n(1 --> 3): 和为 4\r\n不存在 sum = 5 的根节点到叶子节点的路径。\r\n示例 3：\r\n\r\n输入：root = [], targetSum = 0\r\n输出：false\r\n解释：由于树是空的，所以不存在根节点到叶子节点的路径。\r\n\r\n提示：\r\n\r\n树中节点的数目在范围 [0, 5000] 内\r\n-1000 <= Node.val <= 1000\r\n-1000 <= targetSum <= 1000\r\n\r\n```js\r\n/**\r\n * Definition for a binary tree node.\r\n * function TreeNode(val, left, right) {\r\n *     this.val = (val===undefined ? 0 : val)\r\n *     this.left = (left===undefined ? null : left)\r\n *     this.right = (right===undefined ? null : right)\r\n * }\r\n */\r\n/**\r\n * @param {TreeNode} root\r\n * @param {number} targetSum\r\n * @return {boolean}\r\n */\r\nvar hasPathSum = function (root, targetSum) {\r\n  if (!root) return false;\r\n  let res = false;\r\n  const dfs = (n, s) => {\r\n    if (!n.left && !n.right && s === sum) res = true;\r\n    if (n.left) dfs(n.left, s + n.left.val);\r\n    if (n.right) dfs(n.right, s + n.right.val);\r\n  };\r\n  dfs(root, root.val);\r\n  return res;\r\n};\r\n```\r\n"
            ],
            "outputs": []
        }
    ]
}