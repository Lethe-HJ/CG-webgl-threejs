{
    "cells": [
        {
            "language": "markdown",
            "source": [
                "## 动态规划\r\n\r\n将一个问题分解为相互重叠的子问题, 通过反复求解问题,来解决原来的问题"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "## 70. 爬楼梯\r\n\r\n假设你正在爬楼梯。需要 n 阶你才能到达楼顶。\r\n\r\n每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？\r\n\r\n示例 1：\r\n\r\n输入：n = 2\r\n输出：2\r\n解释：有两种方法可以爬到楼顶。\r\n\r\n1. 1 阶 + 1 阶\r\n2. 2 阶\r\n   示例 2：\r\n\r\n输入：n = 3\r\n输出：3\r\n解释：有三种方法可以爬到楼顶。\r\n\r\n1. 1 阶 + 1 阶 + 1 阶\r\n2. 1 阶 + 2 阶\r\n3. 2 阶 + 1 阶\r\n\r\n提示：\r\n\r\n1 <= n <= 45\r\n\r\n![alt text](./img/image12.png)\r\n\r\n```js\r\n/**\r\n * @param {number} n\r\n * @return {number}\r\n */\r\nvar climbStairs = function (n) {\r\n  if (n < 2) return 1;\r\n  let dp0 = 1;\r\n  let dp1 = 1;\r\n  for (let i = 2; i <= n; i += 1) {\r\n    const temp = dp0;\r\n    dp0 = dp1;\r\n    dp1 = dp1 + temp;\r\n  }\r\n  return dp1;\r\n};\r\n```\r\n"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "## 198. 打家劫舍\r\n\r\n你是一个专业的小偷，计划偷窃沿街的房屋。每间房内都藏有一定的现金，影响你偷窃的唯一制约因素就是相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。\r\n\r\n给定一个代表每个房屋存放金额的非负整数数组，计算你 不触动警报装置的情况下 ，一夜之内能够偷窃到的最高金额。\r\n\r\n示例 1：\r\n\r\n输入：[1,2,3,1]\r\n输出：4\r\n解释：偷窃 1 号房屋 (金额 = 1) ，然后偷窃 3 号房屋 (金额 = 3)。\r\n偷窃到的最高金额 = 1 + 3 = 4 。\r\n示例 2：\r\n\r\n输入：[2,7,9,3,1]\r\n输出：12\r\n解释：偷窃 1 号房屋 (金额 = 2), 偷窃 3 号房屋 (金额 = 9)，接着偷窃 5 号房屋 (金额 = 1)。\r\n偷窃到的最高金额 = 2 + 9 + 1 = 12 。\r\n\r\n提示：\r\n\r\n1 <= nums.length <= 100\r\n0 <= nums[i] <= 400\r\n\r\n![alt text](./img/image11.png)\r\n\r\n```js\r\n/**\r\n * @param {number[]} numbs\r\n * @return {number}\r\n */\r\nvar rob = function (nums) {\r\n  if (nums.length === 0) return 0;\r\n  let dp0 = 0;\r\n  let dp1 = nums[0];\r\n  for (let i = 2; i <= nums.length; i += 1) {\r\n    const dp2 = Math.max(dp0 + nums[i - 1], dp1);\r\n    dp0 = dp1;\r\n    dp1 = dp2;\r\n  }\r\n  return dp1;\r\n};\r\n```\r\n"
            ],
            "outputs": []
        }
    ]
}