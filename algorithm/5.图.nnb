{
    "cells": [
        {
            "language": "markdown",
            "source": [
                "## 图的表示法\r\n\r\n邻接矩阵\r\n\r\n![alt text](./img/image-7.png)\r\n\r\n邻接表\r\n\r\n![alt text](./img/image-8.png)"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "## 图的广度优先遍历\r\n\r\n```js\r\nconst graph = {\r\n    0: [1, 2],\r\n    1: [2],\r\n    2: [0, 3],\r\n    3: [3]\r\n};\r\n\r\nconst visited = new Set();\r\nconst q = [2];\r\nwhile (q.length) {\r\n    const n = q.shift();\r\n    console.log(n);\r\n    visited.add(n);\r\n    graph[n].forEach(c => {\r\n        if (!visited.has(c)) {\r\n            q.push(c);\r\n        }\r\n    });\r\n}\r\n\r\n```"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "## 图的深度优先遍历\r\n\r\n```js\r\nconst graph = {\r\n  0: [1, 2],\r\n  1: [2],\r\n  2: [0, 3],\r\n  3: [3],\r\n};\r\n\r\nconst visited = new Set();\r\nconst dfs = (n) => {\r\n  console.log(n);\r\n  visited.add(n);\r\n  graph[n].forEach((c) => {\r\n    if (!visited.has(c)) {\r\n      dfs(c);\r\n    }\r\n  });\r\n};\r\n\r\ndfs(2);\r\n```\r\n"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "### 题目 65. 有效数字\r\n\r\n有效数字（按顺序）可以分成以下几个部分：\r\n\r\n一个 小数 或者 整数\r\n（可选）一个 'e' 或 'E' ，后面跟着一个 整数\r\n小数（按顺序）可以分成以下几个部分：\r\n\r\n（可选）一个符号字符（'+' 或 '-'）\r\n下述格式之一：\r\n至少一位数字，后面跟着一个点 '.'\r\n至少一位数字，后面跟着一个点 '.' ，后面再跟着至少一位数字\r\n一个点 '.' ，后面跟着至少一位数字\r\n整数（按顺序）可以分成以下几个部分：\r\n\r\n（可选）一个符号字符（'+' 或 '-'）\r\n至少一位数字\r\n部分有效数字列举如下：[\"2\", \"0089\", \"-0.1\", \"+3.14\", \"4.\", \"-.9\", \"2e10\", \"-90E3\", \"3e+7\", \"+6e-1\", \"53.5e93\", \"-123.456e789\"]\r\n\r\n部分无效数字列举如下：[\"abc\", \"1a\", \"1e\", \"e3\", \"99e2.5\", \"--6\", \"-+3\", \"95a54e53\"]\r\n\r\n给你一个字符串 s ，如果 s 是一个 有效数字 ，请返回 true 。\r\n\r\n示例 1：\r\n\r\n输入：s = \"0\"\r\n输出：true\r\n示例 2：\r\n\r\n输入：s = \"e\"\r\n输出：false\r\n示例 3：\r\n\r\n输入：s = \".\"\r\n输出：false\r\n\r\n提示：\r\n\r\n1 <= s.length <= 20\r\ns 仅含英文字母（大写和小写），数字（0-9），加号 '+' ，减号 '-' ，或者点 '.' 。\r\n\r\n```js\r\n/**\r\n * @param {string} s\r\n * @return {boolean}\r\n */\r\nvar isNumber = function (s) {\r\n  const graph = {\r\n    0: { blank: 0, sign: 1, \".\": 2, digit: 6 },\r\n    1: { blank: 6, \".\": 2 },\r\n    2: { digit: 3 },\r\n    3: { digit: 3, e: 4 },\r\n    4: { digit: 5, sign: 7 },\r\n    5: { digit: 5 },\r\n    6: { digit: 6, \".\": 3, e: 4 },\r\n    7: { digit: 5 },\r\n  };\r\n  let state = 0;\r\n  for (c of s.trim()) {\r\n    if (c >= \"0\" && c <= \"9\") c = \"digit\";\r\n    else if (c === \" \") c = \"blank\";\r\n    else if (c === \"+\" || c === \"-\") c = \"sign\";\r\n    state = graph[state][c];\r\n    if (state === undefined) return false;\r\n  }\r\n  if (state === 3 || state === 5 || state === 6) return true;\r\n  return false;\r\n};\r\n```\r\n"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "### 题目 417. 太平洋大西洋水流问题\r\n\r\n有一个 m × n 的矩形岛屿，与 太平洋 和 大西洋 相邻。 “太平洋” 处于大陆的左边界和上边界，而 “大西洋” 处于大陆的右边界和下边界。\r\n\r\n这个岛被分割成一个由若干方形单元格组成的网格。给定一个 m x n 的整数矩阵 heights ， heights[r][c] 表示坐标 (r, c) 上单元格 高于海平面的高度 。\r\n\r\n岛上雨水较多，如果相邻单元格的高度 小于或等于 当前单元格的高度，雨水可以直接向北、南、东、西流向相邻单元格。水可以从海洋附近的任何单元格流入海洋。\r\n\r\n返回网格坐标 result 的 2D 列表 ，其中 result[i] = [ri, ci] 表示雨水从单元格 (ri, ci) 流动 既可流向太平洋也可流向大西洋 。\r\n\r\n示例 1：\r\n\r\n![alt text](./img/image-9.png)\r\n\r\n输入: heights = [[1,2,2,3,5],[3,2,3,4,4],[2,4,5,3,1],[6,7,1,4,5],[5,1,1,2,4]]\r\n输出: [[0,4],[1,3],[1,4],[2,2],[3,0],[3,1],[4,0]]\r\n示例 2：\r\n\r\n输入: heights = [[2,1],[1,2]]\r\n输出: [[0,0],[0,1],[1,0],[1,1]]\r\n\r\n提示：\r\n\r\nm == heights.length\r\nn == heights[r].length\r\n1 <= m, n <= 200\r\n0 <= heights[r][c] <= 105\r\n\r\n```js\r\n/**\r\n * @param {number[][]} heights\r\n * @return {number[][]}\r\n */\r\nvar pacificAtlantic = function (heights) {\r\n  if (!matrix || !matrix[0]) return [];\r\n  const m = matrix.length;\r\n  const n = matrix[0].length;\r\n  const flow1 = Array.from({ length: m }, () => new Array(n).fill(false));\r\n  const flow2 = Array.from({ length: m }, () => new Array(n).fill(false));\r\n  const dfs = (r, c, flow) => {\r\n    flow[r][c] = true;\r\n    [\r\n      [r - 1, c],\r\n      [r + 1, c],\r\n      [r, c - 1],\r\n      [r, c + 1],\r\n    ].forEach(([nr, nc]) => {\r\n      if (\r\n        // 保证在矩阵中\r\n        nr >= 0 &&\r\n        nr < m &&\r\n        nc >= 0 &&\r\n        nc < n &&\r\n        // 防止死循环\r\n        !flow[nr][nc] &&\r\n        // 保证逆流而上\r\n        matrix[nr][nc] >= matrix[r][c]\r\n      ) {\r\n        dfs(nr, nc, flow);\r\n      }\r\n    });\r\n  };\r\n\r\n  // 沿着海岸线逆流而上\r\n  for (let r = 0; r < m; r += 1) {\r\n    dfs(r, 0, flow1);\r\n    dfs(r, n - 1, flow2);\r\n  }\r\n  for (let c = 0; c < n; c += 1) {\r\n    dfs(0, c, flow1);\r\n    dfs(m - 1, c, flow2);\r\n  }\r\n  // 收集能流到两个大洋里的坐标\r\n  const res = [];\r\n  for (let r = 0; r < m; r += 1) {\r\n    for (let c = 0; c < n; c += 1) {\r\n      if (flow1[r][c] && flow2[r][c]) res.push([r, c]);\r\n    }\r\n  }\r\n  return res;\r\n};\r\n```\r\n"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "### 题目 133. 克隆图\r\n\r\n给你无向 连通 图中一个节点的引用，请你返回该图的 深拷贝（克隆）。\r\n\r\n图中的每个节点都包含它的值 `val（int）` 和其邻居的列表（`list[Node]`）。\r\n\r\n```js\r\nclass Node {\r\n    public int val;\r\n    public List<Node> neighbors;\r\n}\r\n```\r\n\r\n测试用例格式：\r\n\r\n简单起见，每个节点的值都和它的索引相同。例如，第一个节点值为 1（`val = 1`），第二个节点值为 2（`val = 2`），以此类推。该图在测试用例中使用邻接列表表示。\r\n\r\n邻接列表 是用于表示有限图的无序列表的集合。每个列表都描述了图中节点的邻居集。\r\n\r\n给定节点将始终是图中的第一个节点（值为 1）。你必须将 给定节点的拷贝 作为对克隆图的引用返回。\r\n\r\n示例 1：\r\n\r\n输入：adjList = [[2,4],[1,3],[2,4],[1,3]]\r\n输出：[[2,4],[1,3],[2,4],[1,3]]\r\n解释：\r\n图中有 4 个节点。\r\n节点 1 的值是 1，它有两个邻居：节点 2 和 4 。\r\n节点 2 的值是 2，它有两个邻居：节点 1 和 3 。\r\n节点 3 的值是 3，它有两个邻居：节点 2 和 4 。\r\n节点 4 的值是 4，它有两个邻居：节点 1 和 3 。\r\n示例 2：\r\n\r\n输入：adjList = [[]]\r\n输出：[[]]\r\n解释：输入包含一个空列表。该图仅仅只有一个值为 1 的节点，它没有任何邻居。\r\n示例 3：\r\n\r\n输入：adjList = []\r\n输出：[]\r\n解释：这个图是空的，它不含任何节点。\r\n示例 4：\r\n\r\n输入：adjList = [[2],[1]]\r\n输出：[[2],[1]]\r\n\r\n提示：\r\n\r\n节点数不超过 100 。\r\n每个节点值 Node.val 都是唯一的，1 <= Node.val <= 100。\r\n无向图是一个简单图，这意味着图中没有重复的边，也没有自环。\r\n由于图是无向的，如果节点 p 是节点 q 的邻居，那么节点 q 也必须是节点 p 的邻居。\r\n图是连通图，你可以从给定节点访问到所有节点。\r\n\r\n```js\r\n/**\r\n * // Definition for a Node.\r\n * function Node(val, neighbors) {\r\n *    this.val = val === undefined ? 0 : val;\r\n *    this.neighbors = neighbors === undefined ? [] : neighbors;\r\n * };\r\n */\r\n\r\n/**\r\n * @param {Node} node\r\n * @return {Node}\r\n */\r\nvar cloneGraph = function (node) {\r\n  if (!node) return;\r\n  const visited = new Map();\r\n  visited.set(node, new Node(node.val));\r\n  const q = [node];\r\n  while (q.length) {\r\n    const n = q.shift();\r\n    (n.neighbors || []).forEach((ne) => {\r\n      if (!visited.has(ne)) {\r\n        q.push(ne);\r\n        visited.set(ne, new Node(ne.val));\r\n      }\r\n      visited.get(n).neighbors.push(visited.get(ne));\r\n    });\r\n  }\r\n  return visited.get(node);\r\n};\r\n```\r\n"
            ],
            "outputs": []
        }
    ]
}