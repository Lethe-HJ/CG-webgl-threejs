{
    "cells": [
        {
            "language": "markdown",
            "source": [
                "# 贪心\r\n\r\n期盼通过每个阶段的局部最优选择,从而达到全局的最优。但结果不一定最优\r\n\r\n"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "### 题目 分饼干(455)\r\n\r\n假设你是一位很棒的家长，想要给你的孩子们一些小饼干。但是，每个孩子最多只能给一块饼干。\r\n\r\n对每个孩子 i，都有一个胃口值 g[i]，这是能让孩子们满足胃口的饼干的最小尺寸；并且每块饼干 j，都有一个尺寸 s[j] 。如果 s[j] >= g[i]，我们可以将这个饼干 j 分配给孩子 i ，这个孩子会得到满足。你的目标是尽可能满足越多数量的孩子，并输出这个最大数值。\r\n\r\n示例 1:\r\n\r\n输入: g = [1,2,3], s = [1,1]\r\n输出: 1\r\n解释:\r\n你有三个孩子和两块小饼干，3 个孩子的胃口值分别是：1,2,3。\r\n虽然你有两块小饼干，由于他们的尺寸都是 1，你只能让胃口值是 1 的孩子满足。\r\n所以你应该输出 1。\r\n示例 2:\r\n\r\n输入: g = [1,2], s = [1,2,3]\r\n输出: 2\r\n解释:\r\n你有两个孩子和三块小饼干，2 个孩子的胃口值分别是 1,2。\r\n你拥有的饼干数量和尺寸都足以让所有孩子满足。\r\n所以你应该输出 2.\r\n\r\n提示：\r\n\r\n1 <= g.length <= 3 _ 104\r\n0 <= s.length <= 3 _ 104\r\n1 <= g[i], s[j] <= 231 - 1\r\n\r\n```js\r\n/**\r\n * @param {number[]} g\r\n * @param {number[]} s\r\n * @return {number}\r\n */\r\nvar findContentChildren = function (g, s) {\r\n  const sortFunc = (a, b) => a - b;\r\n  g.sort(sortFunc);\r\n  s.sort(sortFunc);\r\n  let i = 0;\r\n  s.forEach((n) => {\r\n    if (n >= g[i]) i += 1;\r\n  });\r\n  return i;\r\n};\r\n```\r\n"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "### 题目 买卖股票的最佳时机 II （122）\r\n\r\n给你一个整数数组 prices ，其中 prices[i] 表示某支股票第 i 天的价格。\r\n\r\n在每一天，你可以决定是否购买和/或出售股票。你在任何时候 最多 只能持有 一股 股票。你也可以先购买，然后在 同一天 出售。\r\n\r\n返回 你能获得的 最大 利润 。\r\n\r\n示例 1：\r\n\r\n输入：prices = [7,1,5,3,6,4]\r\n输出：7\r\n解释：在第 2 天（股票价格 = 1）的时候买入，在第 3 天（股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5 - 1 = 4 。\r\n随后，在第 4 天（股票价格 = 3）的时候买入，在第 5 天（股票价格 = 6）的时候卖出, 这笔交易所能获得利润 = 6 - 3 = 3 。\r\n总利润为 4 + 3 = 7 。\r\n示例 2：\r\n\r\n输入：prices = [1,2,3,4,5]\r\n输出：4\r\n解释：在第 1 天（股票价格 = 1）的时候买入，在第 5 天 （股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5 - 1 = 4 。\r\n总利润为 4 。\r\n示例 3：\r\n\r\n输入：prices = [7,6,4,3,1]\r\n输出：0\r\n解释：在这种情况下, 交易无法获得正利润，所以不参与交易可以获得最大利润，最大利润为 0 。\r\n\r\n提示：\r\n\r\n1 <= prices.length <= 3 \\* 104\r\n0 <= prices[i] <= 104\r\n\r\n```js\r\n/**\r\n * @param {number[]} prices\r\n * @return {number}\r\n */\r\nvar maxProfit = function (prices) {\r\n  let profit = 0;\r\n  for (let i = 0; i < prices.length; i += 1) {\r\n    if (prices[i] > prices[i - 1]) {\r\n      profit += prices[i] - prices[i - 1];\r\n    }\r\n  }\r\n  return profit;\r\n};\r\n```\r\n"
            ],
            "outputs": []
        }
    ]
}