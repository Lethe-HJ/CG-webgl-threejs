{
    "cells": [
        {
            "language": "markdown",
            "source": [
                "### 1 图形平移\r\n"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "平移矩阵的推导过程\n\n![矩阵平移](./img/image-16.png)\n\n首先，定义平移变换的基本公式为：\n\n$ x' = x + x_1 $\n\n$ y' = y + y_1 $\n\n$ z' = z + z_1 $\n\n$ w = 1 $\n\n这里 $ w $ 是齐次坐标的一部分，使得变换可以用矩阵乘法表示。\n\n接着，我们将这些变换映射到齐次坐标系中的矩阵变换中：\n\n$\n\\begin{bmatrix}\nx \\\\\ny \\\\\nz \\\\\nw\n\\end{bmatrix}\n$ *\n$\n\\begin{bmatrix}\na & b & c & d \\\\\ne & f & g & h \\\\\ni & j & k & l \\\\\nm & n & o & p\n\\end{bmatrix}\n$ =\n$\n\\begin{bmatrix}\nx' \\\\\ny' \\\\\nz' \\\\\nw'\n\\end{bmatrix}\n$\n\n$ ax + by + cz + dw = x' $\n\n$ ex + fy + gz + hw = y' $\n\n$ ix + jy + kz + lw = z' $\n\n$ mx + ny + oz + pw = w' $\n\n通过代入 $ x', y', z', w $ 的定义，我们可以解出矩阵的各个元素：\n\n1. 代入 $ x' = x + x_1 $ 到 $ ax + by + cz + dw = x' $ 得到 $ a = 1, b = 0, c = 0, d = x_1 $。\n2. 代入 $ y' = y + y_1 $ 到 $ ex + fy + gz + hw = y' $ 得到 $ e = 0, f = 1, g = 0, h = y_1 $。\n3. 代入 $ z' = z + z_1 $ 到 $ ix + jy + kz + lw = z' $ 得到 $ i = 0, j = 0, k = 1, l = z_1 $。\n4. 由于 $ w $ 始终为 1，所以 $ mx + ny + oz + pw = w' $ 得到 $ 0x + 0y + 0z + 1w = 1 $。\n\n因此，整个平移变换的齐次坐标矩阵是：\n\n$\n\\begin{pmatrix}\n1 & 0 & 0 & x_1 \\\\\n0 & 1 & 0 & y_1 \\\\\n0 & 0 & 1 & z_1 \\\\\n0 & 0 & 0 & 1\n\\end{pmatrix}\n$\n\n在数学中矩阵的表示是行主序的 就如上面得到的矩阵一样\n\n但是在 webgl 中因为一些历史问题需要换成列主序\n\n行主序换成列主序 具体做法是交换矩阵的行和列 即矩阵转置\n\n转置后的列主序矩阵如下\n\n$\n\\begin{pmatrix}\n1 & 0 & 0 & 0 \\\\\n0 & 1 & 0 & 0 \\\\\n0 & 0 & 1 & 0 \\\\\nx_1 & y_1 & z_1 & 1\n\\end{pmatrix}\n$\n\njs实现\n\n```js\n  // 平移矩阵\n  function getTranslateMatrix(x = 0,y = 0,z = 0) {\n    return new Float32Array([\n      1.0,0.0,0.0,0.0,\n      0.0,1.0,0.0,0.0,\n      0.0,0.0,1.0,0.0,\n        x,  y,  z,  1,\n    ])\n  }\n\n```"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "平移矩阵的应用\r\n"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const vertex_code = /*glsl */ `\n  attribute vec4 aPosition;\n  uniform mat4 mat;\n  void main() {\n    gl_Position = mat * aPosition;\n    gl_PointSize = 10.0;\n  }\n`;\n\nconst fragment_code = /*glsl */ `\n  void main() {\n    gl_FragColor = vec4(1.0,0.0,0.0,1.0);\n  }\n`;\n\nconst js_code = /*js*/ `\n  const aPosition = gl.getAttribLocation(program, 'aPosition');\n  const mat = gl.getUniformLocation(program, 'mat');\n  const points = new Float32Array([\n    -0.5, -0.5,\n    0.5, -0.5,\n    0.0,  0.5,\n  ]);\n  const buffer = gl.createBuffer();\n  gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n  gl.bufferData(gl.ARRAY_BUFFER, points, gl.STATIC_DRAW);\n  gl.vertexAttribPointer(aPosition, 2, gl.FLOAT, false, 0, 0);\n  gl.enableVertexAttribArray(aPosition);\n  let x = -1;\n  function animation() {\n    x += 0.01;\n    if (x > 1) x = -1;\n    const matrix = getTranslateMatrix(x, x);\n    gl.uniformMatrix4fv(mat, false, matrix);\n    gl.drawArrays(gl.TRIANGLES, 0, 3);\n    requestAnimationFrame(animation);\n  }\n  animation();\n`;\nconst { renderWebgl, getLibs } = require(\"../../src/display.js\");\nconst path = require('path');\nconst libs = getLibs(path.resolve(__dirname, \"../../src/libs.js\"));\nrenderWebgl(vertex_code, fragment_code, js_code, libs);\n"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "text/html",
                            "value": [
                                "<style> table, th, tr { text-align: left; }</style>",
                                "      <script>",
                                "          { // 限制变量定义域",
                                "              function initShader(gl, VERTEX_SHADER_SOURCE, FRAGMENT_SHADER_SOURCE) {\r",
                                "  const vertexShader = gl.createShader(gl.VERTEX_SHADER);\r",
                                "  const fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);\r",
                                "\r",
                                "  gl.shaderSource(vertexShader, VERTEX_SHADER_SOURCE); // 指定顶点着色器的源码\r",
                                "  gl.shaderSource(fragmentShader, FRAGMENT_SHADER_SOURCE); // 指定片元着色器的源码\r",
                                "\r",
                                "  // 编译着色器\r",
                                "  gl.compileShader(vertexShader);\r",
                                "  gl.compileShader(fragmentShader);\r",
                                "\r",
                                "  // 创建一个程序对象\r",
                                "  const program = gl.createProgram();\r",
                                "\r",
                                "  gl.attachShader(program, vertexShader);\r",
                                "  gl.attachShader(program, fragmentShader);\r",
                                "\r",
                                "  gl.linkProgram(program);\r",
                                "\r",
                                "  gl.useProgram(program);\r",
                                "\r",
                                "  return program;\r",
                                "}\r",
                                "\r",
                                "// 平移矩阵\r",
                                "function getTranslateMatrix(x = 0, y = 0, z = 0) {\r",
                                "  // prettier-ignore\r",
                                "  return new Float32Array([\r",
                                "    1.0, 0.0, 0.0, 0.0,\r",
                                "    0.0, 1.0, 0.0, 0.0,\r",
                                "    0.0, 0.0, 1.0, 0.0,\r",
                                "    x  , y  , z  , 1,\r",
                                "  ])\r",
                                "}\r",
                                "// 缩放矩阵\r",
                                "function getScaleMatrix(x = 1, y = 1, z = 1) {\r",
                                "  // prettier-ignore\r",
                                "  return new Float32Array([\r",
                                "    x  , 0.0, 0.0, 0.0,\r",
                                "    0.0, y  , 0.0, 0.0,\r",
                                "    0.0, 0.0, z  , 0.0,\r",
                                "    0.0, 0.0, 0.0, 1,\r",
                                "  ])\r",
                                "}\r",
                                "// 绕z轴旋转的旋转矩阵\r",
                                "function getRotateMatrix(deg) {\r",
                                "  // prettier-ignore\r",
                                "  return new Float32Array([\r",
                                "    Math.cos(deg),  Math.sin(deg), 0.0,0.0,\r",
                                "    -Math.sin(deg), Math.cos(deg), 0.0,0.0,\r",
                                "    0.0,            0.0,           1.0,0.0,\r",
                                "    0.0,            0.0,           0.0, 1,\r",
                                "  ])\r",
                                "}\r",
                                "\r",
                                "// 矩阵复合函数\r",
                                "function mixMatrix(A, B) {\r",
                                "  const result = new Float32Array(16);\r",
                                "\r",
                                "  for (let i = 0; i < 4; i++) {\r",
                                "    result[i] =\r",
                                "      A[i] * B[0] + A[i + 4] * B[1] + A[i + 8] * B[2] + A[i + 12] * B[3];\r",
                                "    result[i + 4] =\r",
                                "      A[i] * B[4] + A[i + 4] * B[5] + A[i + 8] * B[6] + A[i + 12] * B[7];\r",
                                "    result[i + 8] =\r",
                                "      A[i] * B[8] + A[i + 4] * B[9] + A[i + 8] * B[10] + A[i + 12] * B[11];\r",
                                "    result[i + 12] =\r",
                                "      A[i] * B[12] + A[i + 4] * B[13] + A[i + 8] * B[14] + A[i + 12] * B[15];\r",
                                "  }\r",
                                "\r",
                                "  return result;\r",
                                "}\r",
                                "\r",
                                "// 归一化函数\r",
                                "function normalized(arr) {\r",
                                "  let sum = 0;\r",
                                "\r",
                                "  for (let i = 0; i < arr.length; i++) {\r",
                                "    sum += arr[i] * arr[i];\r",
                                "  }\r",
                                "\r",
                                "  const middle = Math.sqrt(sum);\r",
                                "\r",
                                "  for (let i = 0; i < arr.length; i++) {\r",
                                "    arr[i] = arr[i] / middle;\r",
                                "  }\r",
                                "}\r",
                                "\r",
                                "// 叉积函数 获取法向量\r",
                                "function cross(a, b) {\r",
                                "  return new Float32Array([\r",
                                "    a[1] * b[2] - a[2] * b[1],\r",
                                "    a[2] * b[0] - a[0] * b[2],\r",
                                "    a[0] * b[1] - a[1] * b[0],\r",
                                "  ]);\r",
                                "}\r",
                                "\r",
                                "// 点积函数 获取投影长度\r",
                                "function dot(a, b) {\r",
                                "  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\r",
                                "}\r",
                                "\r",
                                "// 向量差\r",
                                "function minus(a, b) {\r",
                                "  return new Float32Array([a[0] - b[0], a[1] - b[1], a[2] - b[2]]);\r",
                                "}\r",
                                "\r",
                                "// 视图矩阵获取\r",
                                "function getViewMatrix(\r",
                                "  eyex,\r",
                                "  eyey,\r",
                                "  eyez,\r",
                                "  lookAtx,\r",
                                "  lookAty,\r",
                                "  lookAtz,\r",
                                "  upx,\r",
                                "  upy,\r",
                                "  upz\r",
                                ") {\r",
                                "  // 视点\r",
                                "  const eye = new Float32Array([eyex, eyey, eyez]);\r",
                                "  // 目标点\r",
                                "  const lookAt = new Float32Array([lookAtx, lookAty, lookAtz]);\r",
                                "  // 上方向\r",
                                "  const up = new Float32Array([upx, upy, upz]);\r",
                                "\r",
                                "  // 确定z轴\r",
                                "  const z = minus(eye, lookAt);\r",
                                "\r",
                                "  normalized(z);\r",
                                "  normalized(up);\r",
                                "\r",
                                "  // 确定x轴\r",
                                "  const x = cross(z, up);\r",
                                "\r",
                                "  normalized(x);\r",
                                "  // 确定y轴\r",
                                "  const y = cross(x, z);\r",
                                "  // prettier-ignore\r",
                                "  return new Float32Array([\r",
                                "    x[0],       y[0],       z[0],       0,\r",
                                "    x[1],       y[1],       z[1],       0,\r",
                                "    x[2],       y[2],       z[2],       0,\r",
                                "    -dot(x,eye),-dot(y,eye),-dot(z,eye),1\r",
                                "  ])\r",
                                "}\r",
                                "\r",
                                "// 获取正射投影矩阵\r",
                                "function getOrtho(l, r, t, b, n, f) {\r",
                                "  // prettier-ignore\r",
                                "  return new Float32Array([\r",
                                "    2 / (r - l), 0,           0,           0,\r",
                                "    0,           2/(t-b),     0,           0,\r",
                                "    0,           0,           -2/(f-n),    0,\r",
                                "    -(r+l)/(r-l),-(t+b)/(t-b),-(f+n)/(f-n),1\r",
                                "  ])\r",
                                "}\r",
                                "\r",
                                "\r",
                                "// 获取透视投影矩阵\r",
                                "function getPerspective(fov, aspect, far, near) {\r",
                                "  fov = (fov * Math.PI) / 180;\r",
                                "  // prettier-ignore\r",
                                "  return new Float32Array([\r",
                                "    1/(aspect*Math.tan(fov / 2)), 0,                   0,                      0,\r",
                                "    0,                            1/(Math.tan(fov/2)), 0,                      0,\r",
                                "    0,                            0,                   -(far+near)/(far-near), -(2*far*near)/(far-near),\r",
                                "    0,                            0,                   -1,                     0,\r",
                                "  ])\r",
                                "}\r",
                                "\r",
                                "function distanceSelf(a, b) {\r",
                                "  const x = a[0] - b[0];\r",
                                "  const y = a[1] - b[1];\r",
                                "  const z = a[2] - b[2];\r",
                                "\r",
                                "  const v = x * x + y * y + z * z;\r",
                                "\r",
                                "  return Math.sqrt(v);\r",
                                "}\r",
                                "",
                                "          }",
                                "      </script>",
                                "  ",
                                "        <canvas id=\"7d875070-c674-11ee-9206-957d3f1e7722\" width=\"400\" height=\"400\" style=\"border:1px solid grey\">",
                                "            此浏览器不支持canvas",
                                "        </canvas>",
                                "        <script>",
                                "            { // 限制变量定义域",
                                "                ",
                                "        const ctx = document.getElementById('7d875070-c674-11ee-9206-957d3f1e7722');",
                                "        const gl = ctx.getContext('webgl');",
                                "        const vertexShader = gl.createShader(gl.VERTEX_SHADER);",
                                "        const fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);",
                                "    ",
                                "        gl.shaderSource(vertexShader,  \"\\n  attribute vec4 aPosition;\\n  uniform mat4 mat;\\n  void main() {\\n    gl_Position = mat * aPosition;\\n    gl_PointSize = 10.0;\\n  }\\n\"); // 指定顶点着色器的源码",
                                "        gl.shaderSource(fragmentShader,  \"\\n  void main() {\\n    gl_FragColor = vec4(1.0,0.0,0.0,1.0);\\n  }\\n\"); // 指定片元着色器的源码",
                                "    ",
                                "        // 编译着色器",
                                "        gl.compileShader(vertexShader);",
                                "        gl.compileShader(fragmentShader);",
                                "    ",
                                "        // 创建一个程序对象",
                                "        const program = gl.createProgram();",
                                "    ",
                                "        gl.attachShader(program, vertexShader);",
                                "        gl.attachShader(program, fragmentShader);",
                                "    ",
                                "        gl.linkProgram(program);",
                                "    ",
                                "        gl.useProgram(program);",
                                "    ",
                                "  const aPosition = gl.getAttribLocation(program, 'aPosition');",
                                "  const mat = gl.getUniformLocation(program, 'mat');",
                                "  const points = new Float32Array([",
                                "    -0.5, -0.5,",
                                "    0.5, -0.5,",
                                "    0.0,  0.5,",
                                "  ]);",
                                "  const buffer = gl.createBuffer();",
                                "  gl.bindBuffer(gl.ARRAY_BUFFER, buffer);",
                                "  gl.bufferData(gl.ARRAY_BUFFER, points, gl.STATIC_DRAW);",
                                "  gl.vertexAttribPointer(aPosition, 2, gl.FLOAT, false, 0, 0);",
                                "  gl.enableVertexAttribArray(aPosition);",
                                "  let x = -1;",
                                "  function animation() {",
                                "    x += 0.01;",
                                "    if (x > 1) x = -1;",
                                "    const matrix = getTranslateMatrix(x, x);",
                                "    gl.uniformMatrix4fv(mat, false, matrix);",
                                "    gl.drawArrays(gl.TRIANGLES, 0, 3);",
                                "    requestAnimationFrame(animation);",
                                "  }",
                                "  animation();",
                                "",
                                "            }",
                                "        </script>",
                                "    "
                            ]
                        }
                    ]
                },
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "### 2 图形缩放"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "缩放矩阵推导过程\n\n![Alt text](./img/image-19.png)\n\n首先，定义平移变换的基本公式为：\n\n$ x' = Tx * x $\n\n$ y' = Ty * y $\n\n$ z' = Tz * z $\n\n$ w = 1 $\n\n这里 $ w $ 是齐次坐标的一部分，使得变换可以用矩阵乘法表示。\n\n接着，我们将这些变换映射到齐次坐标系中的矩阵变换中：\n\n$\n\\begin{bmatrix}\nx \\\\\ny \\\\\nz \\\\\nw\n\\end{bmatrix}\n$ *\n$\n\\begin{bmatrix}\na & b & c & d \\\\\ne & f & g & h \\\\\ni & j & k & l \\\\\nm & n & o & p\n\\end{bmatrix}\n$ =\n$\n\\begin{bmatrix}\nx' \\\\\ny' \\\\\nz' \\\\\nw'\n\\end{bmatrix}\n$\n\n$ ax + by + cz + dw = x' $\n\n$ ex + fy + gz + hw = y' $\n\n$ ix + jy + kz + lw = z' $\n\n$ mx + ny + oz + pw = w' $\n\n通过代入 $ x', y', z', w $ 的定义，我们可以解出矩阵的各个元素：\n\n1. 代入 $ x' = Tx * x $ 到 $ ax + by + cz + dw = x' $ 得到 $ a = Tx, b = 0, c = 0, d = 0 $。\n2. 代入 $ y' = Ty * y $ 到 $ ex + fy + gz + hw = y' $ 得到 $ e = 0, f = Ty, g = 0, h = 0 $。\n3. 代入 $ z' = Tz * z $ 到 $ ix + jy + kz + lw = z' $ 得到 $ i = 0, j = 0, k = Tz, l = 0 $。\n4. 由于 $ w $ 始终为 1, 故 $ mx + ny + oz + pw = w' $ 得到 $ p = 1 $。\n\n因此，整个平移变换的齐次坐标矩阵是：\n\n$\n\\begin{pmatrix}\nTx & 0 & 0 & x_1 \\\\\n0 & Ty & 0 & y_1 \\\\\n0 & 0 & Tz & z_1 \\\\\n0 & 0 & 0 & 1\n\\end{pmatrix}\n$\n\n这是一个对称矩阵 列主序与行主序一致\n\njs代码实现缩放矩阵\n\n```js\n// 缩放矩阵\nfunction getScaleMatrix(tx = 1, ty = 1, tz = 1) {\n  return new Float32Array([\n    tx, 0.0, 0.0, 0.0,\n    0.0, ty, 0.0, 0.0,\n    0.0, 0.0, tz, 0.0,\n    0.0, 0.0, 0.0, 1,\n  ])\n}\n```"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "缩放矩阵的应用\r\n"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "// 着色器\n// 创建着色器源码\nconst vertex_code = /*glsl */ `\n  attribute vec4 aPosition;\n  uniform mat4 mat;\n  void main() {\n    gl_Position = mat * aPosition;\n    gl_PointSize = 10.0;\n  }\n`;\n\nconst fragment_code = /*glsl */ `\n  void main() {\n    gl_FragColor = vec4(1.0,0.0,0.0,1.0);\n  }\n`;\n\nconst js_code = /*js*/ `\n  const aPosition = gl.getAttribLocation(program, 'aPosition');\n  const mat = gl.getUniformLocation(program, 'mat');\n  const points = new Float32Array([\n    -0.5, -0.5,\n    0.5, -0.5,\n    0.0,  0.5,\n  ])\n  const buffer = gl.createBuffer();\n  gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n  gl.bufferData(gl.ARRAY_BUFFER, points, gl.STATIC_DRAW);\n  gl.vertexAttribPointer(aPosition, 2, gl.FLOAT, false, 0, 0);\n  gl.enableVertexAttribArray(aPosition)\n  let x = 0.1;\n  function animation() {\n    x += 0.01;\n    if (x > 1.5) x = 0.1;\n    const matrix = getScaleMatrix(x, x);\n    // 参数 location transpose array\n    gl.uniformMatrix4fv(mat, false, matrix);\n    gl.drawArrays(gl.TRIANGLES, 0, 3);\n    requestAnimationFrame(animation);\n  }\n  animation();\n`;\nconst { renderWebgl, getLibs } = require(\"../../src/display.js\");\nconst path = require('path');\nconst libs = getLibs(path.resolve(__dirname, \"../../src/libs.js\"));\nrenderWebgl(vertex_code, fragment_code, js_code);\n"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "text/html",
                            "value": [
                                "<style> table, th, tr { text-align: left; }</style>",
                                "      <script>",
                                "          ",
                                "  // 平移矩阵",
                                "  function getTranslateMatrix(x = 0,y = 0,z = 0) {",
                                "    return new Float32Array([",
                                "      1.0,0.0,0.0,0.0,",
                                "      0.0,1.0,0.0,0.0,",
                                "      0.0,0.0,1.0,0.0,",
                                "        x,  y,  z,  1,",
                                "    ])",
                                "  }",
                                "",
                                "      </script>",
                                "  ",
                                "        <canvas id=\"96189110-bf2d-11ee-9e26-7f5748262c74\" width=\"400\" height=\"400\" style=\"border:1px solid grey\">",
                                "            此浏览器不支持canvas",
                                "        </canvas>",
                                "        <script>",
                                "            { // 限制变量定义域",
                                "                ",
                                "        const ctx = document.getElementById('96189110-bf2d-11ee-9e26-7f5748262c74');",
                                "        const gl = ctx.getContext('webgl');",
                                "        const vertexShader = gl.createShader(gl.VERTEX_SHADER);",
                                "        const fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);",
                                "    ",
                                "        gl.shaderSource(vertexShader,  \"\\n  attribute vec4 aPosition;\\n  uniform mat4 mat;\\n  void main() {\\n    gl_Position = mat * aPosition;\\n    gl_PointSize = 10.0;\\n  }\\n\"); // 指定顶点着色器的源码",
                                "        gl.shaderSource(fragmentShader,  \"\\n  void main() {\\n    gl_FragColor = vec4(1.0,0.0,0.0,1.0);\\n  }\\n\"); // 指定片元着色器的源码",
                                "    ",
                                "        // 编译着色器",
                                "        gl.compileShader(vertexShader);",
                                "        gl.compileShader(fragmentShader);",
                                "    ",
                                "        // 创建一个程序对象",
                                "        const program = gl.createProgram();",
                                "    ",
                                "        gl.attachShader(program, vertexShader);",
                                "        gl.attachShader(program, fragmentShader);",
                                "    ",
                                "        gl.linkProgram(program);",
                                "    ",
                                "        gl.useProgram(program);",
                                "    ",
                                "  const aPosition = gl.getAttribLocation(program, 'aPosition');",
                                "  const mat = gl.getUniformLocation(program, 'mat');",
                                "  const points = new Float32Array([",
                                "    -0.5, -0.5,",
                                "    0.5, -0.5,",
                                "    0.0,  0.5,",
                                "  ])",
                                "  const buffer = gl.createBuffer();",
                                "  gl.bindBuffer(gl.ARRAY_BUFFER, buffer);",
                                "  gl.bufferData(gl.ARRAY_BUFFER, points, gl.STATIC_DRAW);",
                                "  gl.vertexAttribPointer(aPosition, 2, gl.FLOAT, false, 0, 0);",
                                "  gl.enableVertexAttribArray(aPosition)",
                                "  let x = 0.1;",
                                "  function animation() {",
                                "    x += 0.01;",
                                "    if (x > 1.5) x = 0.1;",
                                "    const matrix = getScaleMatrix(x, x);",
                                "    // 参数 location transpose array",
                                "    gl.uniformMatrix4fv(mat, false, matrix);",
                                "    gl.drawArrays(gl.TRIANGLES, 0, 3);",
                                "    requestAnimationFrame(animation);",
                                "  }",
                                "  animation();",
                                "",
                                "            }",
                                "        </script>",
                                "    "
                            ]
                        }
                    ]
                },
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "### 3 图形旋转"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "旋转矩阵的推导过程 我们先探讨围绕z轴旋转的情况\n\n![Alt text](./img/image-20.png)\n\n顶点 A (x, y)\n\n$ x = R * cos(α) $\n\n$ y = R * sin(α) $\n\n$ z = 0 $\n\n顶点 A' (x', y')\n\n$$\n\\begin{align*}\n&x' = R * \\cos(α + β) \\\\\n&\\phantom{x'} = R * ( \\cos(α)*\\cos(β) - \\sin(α)*\\sin(β)) \\\\\n&\\phantom{x'} = R*\\cos(α)*\\cos(β) - R*\\sin(α)*\\sin(β) \\\\\n&将顶点A带入 \\\\\n&\\phantom{x'} = x*\\cos(β) - y*\\sin(β)\n\\end{align*}\n$$\n\n$$\n\\begin{align*}\n&y' = R * \\sin(α + β) \\\\\n&\\phantom{y'} = R * ( \\cos(β)*\\cos(α) + \\cos(α)*\\sin(β)) \\\\\n&\\phantom{y'} = R * \\sin(α)*\\cos(β) + R*\\cos(α)*\\sin(β) \\\\\n&将顶点A带入 \\\\\n&\\phantom{y'} = y*\\cos(β) - x*\\sin(β)\n\\end{align*}\n$$\n\n$$\nz' = z\n$$\n\n\n$ ax + by + cz + dw = x' $\n\n$ ex + fy + gz + hw = y' $\n\n$ ix + jy + kz + lw = z' $\n\n$ mx + ny + oz + pw = w' $\n\n得到矩阵\n\n绕z轴的旋转矩阵\n$\n\\begin{pmatrix}\n    \\cos(β) & \\sin(β) & 0 & 0 \\\\\n    \\sin(β) & \\cos(β) & 0 & 0 \\\\\n    0       & 0       & 1 & 0 \\\\\n    0       & 0       & 0 & 1\\\\\n\\end{pmatrix}\n$\n\n可以看出来绕z轴即z轴的内容不变（第三行和第三列的内容不变）\n\n类似地 得出其余两轴的旋转矩阵\n\n绕y轴的旋转矩阵\n$\n\\begin{pmatrix}\n    \\cos(β) & 0 & \\sin(β) & 0 \\\\\n    0       & 1 & 0       & 0 \\\\\n    \\sin(β) & 1 & \\cos(β) & 0 \\\\\n    0       & 0 & 0       & 1 \\\\\n\\end{pmatrix}\n$\n\n绕x轴的旋转矩阵\n$\n\\begin{pmatrix}\n    1 & 0       & 0       & 0 \\\\\n    0 & \\cos(β) & \\sin(β) & 0 \\\\\n    0 & \\sin(β) & \\cos(β) & 0 \\\\\n    0 & 0       & 0       & 0 \\\\\n\\end{pmatrix}\n$\n\njs 实现\n\n```js\n  // 绕z轴旋转的旋转矩阵\n  function getRotateMatrix(deg) {\n    return new Float32Array([\n      Math.cos(deg),  Math.sin(deg) ,0.0,0.0,\n      -Math.sin(deg)  ,Math.cos(deg) ,0.0,0.0,\n      0.0,            0.0,            1.0,0.0,\n      0.0,            0.0,            0.0, 1,\n    ])\n  }\n\n```"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "旋转矩阵的应用\r\n"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const vertex_code = /*glsl */ `\n  attribute vec4 aPosition;\n  uniform mat4 mat;\n  void main() {\n    gl_Position = mat * aPosition;\n    gl_PointSize = 10.0;\n  }\n`;\n\nconst fragment_code = /*glsl */ `\n  void main() {\n    gl_FragColor = vec4(1.0,0.0,0.0,1.0);\n  }\n`;\n\nconst js_code = /*js*/ `\n  const aPosition = gl.getAttribLocation(program, 'aPosition');\n  const mat = gl.getUniformLocation(program, 'mat');\n  const points = new Float32Array([\n    -0.5, -0.5,\n    0.5, -0.5,\n    0.0,  0.5,\n  ])\n  const buffer = gl.createBuffer();\n  gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n  gl.bufferData(gl.ARRAY_BUFFER, points, gl.STATIC_DRAW);\n  gl.vertexAttribPointer(aPosition, 2, gl.FLOAT, false, 0, 0);\n  gl.enableVertexAttribArray(aPosition)\n  \n  let x = 0;\n  function animation() {\n    x += 0.01;\n    const matrix = getRotateMatrix(x);\n    // gl.vertexAttrib1f(aTranslate, x);\n    gl.uniformMatrix4fv(mat, false, matrix);\n    gl.drawArrays(gl.TRIANGLES, 0, 3);\n    requestAnimationFrame(animation);\n  }\n  animation()\n`;\nconst { renderWebgl, getLibs } = require(\"../../src/display.js\");\nconst path = require('path');\nconst libs = getLibs(path.resolve(__dirname, \"../../src/libs.js\"));\nrenderWebgl(vertex_code, fragment_code, js_code, libs);"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "text/html",
                            "value": [
                                "<style> table, th, tr { text-align: left; }</style>",
                                "      <script>",
                                "          ",
                                "  // 视图矩阵获取",
                                "  function getViewMatrix(",
                                "    eyex,",
                                "    eyey,",
                                "    eyez,",
                                "    lookAtx,",
                                "    lookAty,",
                                "    lookAtz,",
                                "    upx,",
                                "    upy,",
                                "    upz",
                                "  ) {",
                                "    // 视点",
                                "    const eye = new Float32Array([eyex, eyey, eyez]);",
                                "    // 目标点",
                                "    const lookAt = new Float32Array([lookAtx, lookAty, lookAtz]);",
                                "    // 上方向",
                                "    const up = new Float32Array([upx, upy, upz]);",
                                "",
                                "    // 确定z轴",
                                "    const z = minus(eye, lookAt);",
                                "",
                                "    normalized(z);",
                                "    normalized(up);",
                                "",
                                "    // 确定x轴",
                                "    const x = cross(z, up);",
                                "",
                                "    normalized(x);",
                                "    // 确定y轴",
                                "    const y = cross(x, z);",
                                "    // prettier-ignore",
                                "    return new Float32Array([",
                                "      x[0],       y[0],       z[0],       0,",
                                "      x[1],       y[1],       z[1],       0,",
                                "      x[2],       y[2],       z[2],       0,",
                                "      -dot(x,eye),-dot(y,eye),-dot(z,eye),1",
                                "    ])",
                                "  }",
                                "",
                                "      </script>",
                                "  ",
                                "",
                                "      <script>",
                                "          ",
                                "  // 绕z轴旋转的旋转矩阵",
                                "  function getRotateMatrix(deg) {",
                                "    return new Float32Array([",
                                "      Math.cos(deg),  Math.sin(deg) ,0.0,0.0,",
                                "      -Math.sin(deg)  ,Math.cos(deg) ,0.0,0.0,",
                                "      0.0,            0.0,            1.0,0.0,",
                                "      0.0,            0.0,            0.0, 1,",
                                "    ])",
                                "  }",
                                "",
                                "      </script>",
                                "  ",
                                "",
                                "      <script>",
                                "          ",
                                "  // 缩放矩阵",
                                "  function getScaleMatrix(tx = 1, ty = 1, tz = 1) {",
                                "    return new Float32Array([",
                                "      tx, 0.0, 0.0, 0.0,",
                                "      0.0, ty, 0.0, 0.0,",
                                "      0.0, 0.0, tz, 0.0,",
                                "      0.0, 0.0, 0.0, 1,",
                                "    ])",
                                "  }",
                                "",
                                "      </script>",
                                "  ",
                                "",
                                "      <script>",
                                "          ",
                                "  // 绕z轴旋转的旋转矩阵",
                                "  function getRotateMatrix(deg) {",
                                "    return new Float32Array([",
                                "      Math.cos(deg),  -Math.sin(deg) ,0.0,0.0,",
                                "      -Math.sin(deg)  ,Math.cos(deg) ,0.0,0.0,",
                                "      0.0,            0.0,            1.0,0.0,",
                                "      0.0,            0.0,            0.0, 1,",
                                "    ])",
                                "  }",
                                "",
                                "      </script>",
                                "  ",
                                "",
                                "      <script>",
                                "          ",
                                "  // 绕z轴旋转的旋转矩阵",
                                "  function getRotateMatrix(deg) {",
                                "    return new Float32Array([",
                                "      Math.cos(deg),  Math.sin(deg) ,0.0,0.0,",
                                "      -Math.sin(deg)  ,Math.cos(deg) ,0.0,0.0,",
                                "      0.0,            0.0,            1.0,0.0,",
                                "      0.0,            0.0,            0.0, 1,",
                                "    ])",
                                "  }",
                                "",
                                "      </script>",
                                "  ",
                                "        <canvas id=\"7e6eaaf0-b5a4-11ee-b32f-57ef30c77b2d\" width=\"400\" height=\"400\" style=\"border:1px solid grey\">",
                                "            此浏览器不支持canvas",
                                "        </canvas>",
                                "        <script>",
                                "            { // 限制变量定义域",
                                "                ",
                                "        const ctx = document.getElementById('7e6eaaf0-b5a4-11ee-b32f-57ef30c77b2d');",
                                "        const gl = ctx.getContext('webgl');",
                                "        const vertexShader = gl.createShader(gl.VERTEX_SHADER);",
                                "        const fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);",
                                "    ",
                                "        gl.shaderSource(vertexShader,  \"\\n  attribute vec4 aPosition;\\n  uniform mat4 mat;\\n  void main() {\\n    gl_Position = mat * aPosition;\\n    gl_PointSize = 10.0;\\n  }\\n\"); // 指定顶点着色器的源码",
                                "        gl.shaderSource(fragmentShader,  \"\\n  void main() {\\n    gl_FragColor = vec4(1.0,0.0,0.0,1.0);\\n  }\\n\"); // 指定片元着色器的源码",
                                "    ",
                                "        // 编译着色器",
                                "        gl.compileShader(vertexShader);",
                                "        gl.compileShader(fragmentShader);",
                                "    ",
                                "        // 创建一个程序对象",
                                "        const program = gl.createProgram();",
                                "    ",
                                "        gl.attachShader(program, vertexShader);",
                                "        gl.attachShader(program, fragmentShader);",
                                "    ",
                                "        gl.linkProgram(program);",
                                "    ",
                                "        gl.useProgram(program);",
                                "    ",
                                "  const aPosition = gl.getAttribLocation(program, 'aPosition');",
                                "  const mat = gl.getUniformLocation(program, 'mat');",
                                "  const points = new Float32Array([",
                                "    -0.5, -0.5,",
                                "    0.5, -0.5,",
                                "    0.0,  0.5,",
                                "  ])",
                                "  const buffer = gl.createBuffer();",
                                "  gl.bindBuffer(gl.ARRAY_BUFFER, buffer);",
                                "  gl.bufferData(gl.ARRAY_BUFFER, points, gl.STATIC_DRAW);",
                                "  gl.vertexAttribPointer(aPosition, 2, gl.FLOAT, false, 0, 0);",
                                "  gl.enableVertexAttribArray(aPosition)",
                                "  ",
                                "  let x = 0;",
                                "  function animation() {",
                                "    x += 0.01;",
                                "    const matrix = getRotateMatrix(x);",
                                "    // gl.vertexAttrib1f(aTranslate, x);",
                                "    gl.uniformMatrix4fv(mat, false, matrix);",
                                "    gl.drawArrays(gl.TRIANGLES, 0, 3);",
                                "    requestAnimationFrame(animation);",
                                "  }",
                                "  animation()",
                                "",
                                "            }",
                                "        </script>",
                                "    "
                            ]
                        }
                    ]
                },
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "### 4 矩阵复合\r\n\r\n矩阵 A * 矩阵 B 表示先进行 B 变换再进行 A 变换\r\n\r\n![矩阵乘法](./img/image-21.png)\r\n\r\njs实现\r\n\r\n```js\r\n  function mixMatrix(A, B) {\r\n    const result = new Float32Array(16);\r\n    for (let i = 0; i < 4; i++) {\r\n      result[i] = A[i] * B[0] + A[i + 4] * B[1] + A[i + 8] * B[2] + A[i + 12] * B[3]\r\n      result[i + 4] = A[i] * B[4] + A[i + 4] * B[5] + A[i + 8] * B[6] + A[i + 12] * B[7]\r\n      result[i + 8] = A[i] * B[8] + A[i + 4] * B[9] + A[i + 8] * B[10] + A[i + 12] * B[11]\r\n      result[i + 12] = A[i] * B[12] + A[i + 4] * B[13] + A[i + 8] * B[14] + A[i + 12] * B[15]\r\n    }\r\n    return result;\r\n  }\r\n```"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const vertex_code = /*glsl */ `\n  attribute vec4 aPosition;\n  uniform mat4 mat;\n  void main() {\n    gl_Position = mat * aPosition;\n  }\n`;\n\nconst fragment_code = /*glsl */ `\n  void main() {\n    gl_FragColor = vec4(1.0,0.0,0.0,1.0);\n  }\n`;\n\nconst js_code = /*js*/ `\n  const aPosition = gl.getAttribLocation(program, 'aPosition');\n  const mat = gl.getUniformLocation(program, 'mat');\n  const points = new Float32Array([\n    -0.5, -0.5,\n    0.5, -0.5,\n    0.0,  0.5,\n  ])\n  const buffer = gl.createBuffer();\n  gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n  gl.bufferData(gl.ARRAY_BUFFER, points, gl.STATIC_DRAW);\n  gl.vertexAttribPointer(aPosition, 2, gl.FLOAT, false, 0, 0);\n  gl.enableVertexAttribArray(aPosition)\n  let deg = 0;\n  let translateX = -1;\n  let scaleX = 0.1;\n  function animation() {\n    deg += 0.01;\n    translateX += 0.01;\n    scaleX += 0.01;\n    if (translateX > 1) translateX = -1;\n    if (scaleX > 1.5)  scaleX = 0.1;\n    const translate = getTranslateMatrix(translateX);\n    const scale = getScaleMatrix(scaleX);\n    const rotate = getRotateMatrix(deg);\n    const matrix = mixMatrix(mixMatrix(translate, scale), rotate);\n    gl.uniformMatrix4fv(mat, false, matrix);\n    gl.drawArrays(gl.TRIANGLES, 0, 3);\n    requestAnimationFrame(animation);\n  }\n  animation()\n`;\nconst { renderWebgl, getLibs } = require(\"../../src/display.js\");\nconst path = require('path');\nconst libs = getLibs(path.resolve(__dirname, \"../../src/libs.js\"));\nrenderWebgl(vertex_code, fragment_code, js_code, libs);\n"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "text/html",
                            "value": [
                                "<style> table, th, tr { text-align: left; }</style>",
                                "      <script>",
                                "          { // 限制变量定义域",
                                "              function initShader(gl, VERTEX_SHADER_SOURCE, FRAGMENT_SHADER_SOURCE) {\r",
                                "  const vertexShader = gl.createShader(gl.VERTEX_SHADER);\r",
                                "  const fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);\r",
                                "\r",
                                "  gl.shaderSource(vertexShader, VERTEX_SHADER_SOURCE); // 指定顶点着色器的源码\r",
                                "  gl.shaderSource(fragmentShader, FRAGMENT_SHADER_SOURCE); // 指定片元着色器的源码\r",
                                "\r",
                                "  // 编译着色器\r",
                                "  gl.compileShader(vertexShader);\r",
                                "  gl.compileShader(fragmentShader);\r",
                                "\r",
                                "  // 创建一个程序对象\r",
                                "  const program = gl.createProgram();\r",
                                "\r",
                                "  gl.attachShader(program, vertexShader);\r",
                                "  gl.attachShader(program, fragmentShader);\r",
                                "\r",
                                "  gl.linkProgram(program);\r",
                                "\r",
                                "  gl.useProgram(program);\r",
                                "\r",
                                "  return program;\r",
                                "}\r",
                                "\r",
                                "// 平移矩阵\r",
                                "function getTranslateMatrix(x = 0, y = 0, z = 0) {\r",
                                "  // prettier-ignore\r",
                                "  return new Float32Array([\r",
                                "    1.0, 0.0, 0.0, 0.0,\r",
                                "    0.0, 1.0, 0.0, 0.0,\r",
                                "    0.0, 0.0, 1.0, 0.0,\r",
                                "    x  , y  , z  , 1,\r",
                                "  ])\r",
                                "}\r",
                                "// 缩放矩阵\r",
                                "function getScaleMatrix(x = 1, y = 1, z = 1) {\r",
                                "  // prettier-ignore\r",
                                "  return new Float32Array([\r",
                                "    x  , 0.0, 0.0, 0.0,\r",
                                "    0.0, y  , 0.0, 0.0,\r",
                                "    0.0, 0.0, z  , 0.0,\r",
                                "    0.0, 0.0, 0.0, 1,\r",
                                "  ])\r",
                                "}\r",
                                "// 绕z轴旋转的旋转矩阵\r",
                                "function getRotateMatrix(deg) {\r",
                                "  // prettier-ignore\r",
                                "  return new Float32Array([\r",
                                "    Math.cos(deg),  Math.sin(deg), 0.0,0.0,\r",
                                "    -Math.sin(deg), Math.cos(deg), 0.0,0.0,\r",
                                "    0.0,            0.0,           1.0,0.0,\r",
                                "    0.0,            0.0,           0.0, 1,\r",
                                "  ])\r",
                                "}\r",
                                "\r",
                                "// 矩阵复合函数\r",
                                "function mixMatrix(A, B) {\r",
                                "  const result = new Float32Array(16);\r",
                                "\r",
                                "  for (let i = 0; i < 4; i++) {\r",
                                "    result[i] =\r",
                                "      A[i] * B[0] + A[i + 4] * B[1] + A[i + 8] * B[2] + A[i + 12] * B[3];\r",
                                "    result[i + 4] =\r",
                                "      A[i] * B[4] + A[i + 4] * B[5] + A[i + 8] * B[6] + A[i + 12] * B[7];\r",
                                "    result[i + 8] =\r",
                                "      A[i] * B[8] + A[i + 4] * B[9] + A[i + 8] * B[10] + A[i + 12] * B[11];\r",
                                "    result[i + 12] =\r",
                                "      A[i] * B[12] + A[i + 4] * B[13] + A[i + 8] * B[14] + A[i + 12] * B[15];\r",
                                "  }\r",
                                "\r",
                                "  return result;\r",
                                "}\r",
                                "\r",
                                "// 归一化函数\r",
                                "function normalized(arr) {\r",
                                "  let sum = 0;\r",
                                "\r",
                                "  for (let i = 0; i < arr.length; i++) {\r",
                                "    sum += arr[i] * arr[i];\r",
                                "  }\r",
                                "\r",
                                "  const middle = Math.sqrt(sum);\r",
                                "\r",
                                "  for (let i = 0; i < arr.length; i++) {\r",
                                "    arr[i] = arr[i] / middle;\r",
                                "  }\r",
                                "}\r",
                                "\r",
                                "// 叉积函数 获取法向量\r",
                                "function cross(a, b) {\r",
                                "  return new Float32Array([\r",
                                "    a[1] * b[2] - a[2] * b[1],\r",
                                "    a[2] * b[0] - a[0] * b[2],\r",
                                "    a[0] * b[1] - a[1] * b[0],\r",
                                "  ]);\r",
                                "}\r",
                                "\r",
                                "// 点积函数 获取投影长度\r",
                                "function dot(a, b) {\r",
                                "  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\r",
                                "}\r",
                                "\r",
                                "// 向量差\r",
                                "function minus(a, b) {\r",
                                "  return new Float32Array([a[0] - b[0], a[1] - b[1], a[2] - b[2]]);\r",
                                "}\r",
                                "\r",
                                "// 视图矩阵获取\r",
                                "function getViewMatrix(\r",
                                "  eyex,\r",
                                "  eyey,\r",
                                "  eyez,\r",
                                "  lookAtx,\r",
                                "  lookAty,\r",
                                "  lookAtz,\r",
                                "  upx,\r",
                                "  upy,\r",
                                "  upz\r",
                                ") {\r",
                                "  // 视点\r",
                                "  const eye = new Float32Array([eyex, eyey, eyez]);\r",
                                "  // 目标点\r",
                                "  const lookAt = new Float32Array([lookAtx, lookAty, lookAtz]);\r",
                                "  // 上方向\r",
                                "  const up = new Float32Array([upx, upy, upz]);\r",
                                "\r",
                                "  // 确定z轴\r",
                                "  const z = minus(eye, lookAt);\r",
                                "\r",
                                "  normalized(z);\r",
                                "  normalized(up);\r",
                                "\r",
                                "  // 确定x轴\r",
                                "  const x = cross(z, up);\r",
                                "\r",
                                "  normalized(x);\r",
                                "  // 确定y轴\r",
                                "  const y = cross(x, z);\r",
                                "  // prettier-ignore\r",
                                "  return new Float32Array([\r",
                                "    x[0],       y[0],       z[0],       0,\r",
                                "    x[1],       y[1],       z[1],       0,\r",
                                "    x[2],       y[2],       z[2],       0,\r",
                                "    -dot(x,eye),-dot(y,eye),-dot(z,eye),1\r",
                                "  ])\r",
                                "}\r",
                                "\r",
                                "// 获取正射投影矩阵\r",
                                "function getOrtho(l, r, t, b, n, f) {\r",
                                "  // prettier-ignore\r",
                                "  return new Float32Array([\r",
                                "    2 / (r - l), 0,           0,           0,\r",
                                "    0,           2/(t-b),     0,           0,\r",
                                "    0,           0,           -2/(f-n),    0,\r",
                                "    -(r+l)/(r-l),-(t+b)/(t-b),-(f+n)/(f-n),1\r",
                                "  ])\r",
                                "}\r",
                                "\r",
                                "// 获取透视投影矩阵\r",
                                "function getPerspective(fov, aspect, far, near) {\r",
                                "  fov = (fov * Math.PI) / 180;\r",
                                "  // prettier-ignore\r",
                                "  return new Float32Array([\r",
                                "    1/(aspect*Math.tan(fov / 2)), 0,                   0,                      0,\r",
                                "    0,                            1/(Math.tan(fov/2)), 0,                      0,\r",
                                "    0,                            0,                   -(far+near)/(far-near), -(2*far*near)/(far-near),\r",
                                "    0,                            0,                   -1,                     0,\r",
                                "  ])\r",
                                "}\r",
                                "\r",
                                "function distanceSelf(a, b) {\r",
                                "  const x = a[0] - b[0];\r",
                                "  const y = a[1] - b[1];\r",
                                "  const z = a[2] - b[2];\r",
                                "\r",
                                "  const v = x * x + y * y + z * z;\r",
                                "\r",
                                "  return Math.sqrt(v);\r",
                                "}\r",
                                "",
                                "          }",
                                "      </script>",
                                "  ",
                                "      <script>",
                                "          ",
                                "  // 平移矩阵",
                                "  function getTranslateMatrix(x = 0,y = 0,z = 0) {",
                                "    return new Float32Array([",
                                "      1.0,0.0,0.0,0.0,",
                                "      0.0,1.0,0.0,0.0,",
                                "      0.0,0.0,1.0,0.0,",
                                "        x,  y,  z,  1,",
                                "    ])",
                                "  }",
                                "",
                                "      </script>",
                                "  ",
                                "        <canvas id=\"9bc40620-bf2e-11ee-9e26-7f5748262c74\" width=\"400\" height=\"400\" style=\"border:1px solid grey\">",
                                "            此浏览器不支持canvas",
                                "        </canvas>",
                                "        <script>",
                                "            { // 限制变量定义域",
                                "                ",
                                "        const ctx = document.getElementById('9bc40620-bf2e-11ee-9e26-7f5748262c74');",
                                "        const gl = ctx.getContext('webgl');",
                                "        const vertexShader = gl.createShader(gl.VERTEX_SHADER);",
                                "        const fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);",
                                "    ",
                                "        gl.shaderSource(vertexShader,  \"\\n  attribute vec4 aPosition;\\n  uniform mat4 mat;\\n  void main() {\\n    gl_Position = mat * aPosition;\\n  }\\n\"); // 指定顶点着色器的源码",
                                "        gl.shaderSource(fragmentShader,  \"\\n  void main() {\\n    gl_FragColor = vec4(1.0,0.0,0.0,1.0);\\n  }\\n\"); // 指定片元着色器的源码",
                                "    ",
                                "        // 编译着色器",
                                "        gl.compileShader(vertexShader);",
                                "        gl.compileShader(fragmentShader);",
                                "    ",
                                "        // 创建一个程序对象",
                                "        const program = gl.createProgram();",
                                "    ",
                                "        gl.attachShader(program, vertexShader);",
                                "        gl.attachShader(program, fragmentShader);",
                                "    ",
                                "        gl.linkProgram(program);",
                                "    ",
                                "        gl.useProgram(program);",
                                "    ",
                                "  const aPosition = gl.getAttribLocation(program, 'aPosition');",
                                "  const mat = gl.getUniformLocation(program, 'mat');",
                                "  const points = new Float32Array([",
                                "    -0.5, -0.5,",
                                "    0.5, -0.5,",
                                "    0.0,  0.5,",
                                "  ])",
                                "  const buffer = gl.createBuffer();",
                                "  gl.bindBuffer(gl.ARRAY_BUFFER, buffer);",
                                "  gl.bufferData(gl.ARRAY_BUFFER, points, gl.STATIC_DRAW);",
                                "  gl.vertexAttribPointer(aPosition, 2, gl.FLOAT, false, 0, 0);",
                                "  gl.enableVertexAttribArray(aPosition)",
                                "  let deg = 0;",
                                "  let translateX = -1;",
                                "  let scaleX = 0.1;",
                                "  function animation() {",
                                "    deg += 0.01;",
                                "    translateX += 0.01;",
                                "    scaleX += 0.01;",
                                "    if (translateX > 1) translateX = -1;",
                                "    if (scaleX > 1.5)  scaleX = 0.1;",
                                "    const translate = getTranslateMatrix(translateX);",
                                "    const scale = getScaleMatrix(scaleX);",
                                "    const rotate = getRotateMatrix(deg);",
                                "    const matrix = mixMatrix(mixMatrix(translate, scale), rotate);",
                                "    gl.uniformMatrix4fv(mat, false, matrix);",
                                "    gl.drawArrays(gl.TRIANGLES, 0, 3);",
                                "    requestAnimationFrame(animation);",
                                "  }",
                                "  animation()",
                                "",
                                "            }",
                                "        </script>",
                                "    "
                            ]
                        }
                    ]
                },
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "### 5 视图矩阵\n![](2024-01-13-16-20-57.png)\n\n![Alt text](./img/image-26.png)\n\n假设视点为eye(x,y,z)\n根据前面推导的平移矩阵得，从视点移动到坐标原点的变换矩阵为\n\n$\n\\begin{pmatrix}\n1 & 0 & 0 & -eye.x \\\\\n0 & 1 & 0 & -eye.y \\\\\n0 & 0 & 1 & -eye.z \\\\\n0 & 0 & 0 & 1\n\\end{pmatrix}\n$\n\n由视点和朝向确定z的方向\n\n由z方向和上方向确定x方向\n\n已知一组新的正交基的情况下直接用这组新的正交基构造基于旧基的旋转矩阵如下\n\n$\n\\begin{pmatrix}\nx[0] & x[1] & x[2] & 0 \\\\\ny[0] & y[1] & y[2] & 0 \\\\\nz[0] & z[1] & z[2] & 0 \\\\\n0 & 0 & 0 & 1\n\\end{pmatrix}\n$\n\n$\n\\begin{pmatrix}\n1 & 0 & 0 & -eye.x \\\\\n0 & 1 & 0 & -eye.y \\\\\n0 & 0 & 1 & -eye.z \\\\\n0 & 0 & 0 & 1\n\\end{pmatrix} \n$ * \n$\n\\begin{pmatrix}\nx[0] & x[1] & x[2] & 0 \\\\\ny[0] & y[1] & y[2] & 0 \\\\\nz[0] & z[1] & z[2] & 0 \\\\\n0 & 0 & 0 & 1\n\\end{pmatrix}\n$ = \n$\n\\begin{pmatrix}\nx[0] & x[1] & x[2] & -eye \\cdot x \\\\\ny[0] & y[1] & y[2] & -eye \\cdot y \\\\\nz[0] & z[1] & z[2] & -eye \\cdot z \\\\\n0 & 0 & 0 & 1\n\\end{pmatrix}\n$\n\n\n\n转换成列主序\n\n$\n\\begin{pmatrix}\nx[0] & y[0] & z[0] & 0 \\\\\nx[1] & y[1] & z[1] & 0 \\\\\nx[2] & y[2] & z[2] & 0 \\\\\n-eye \\cdot x & -eye \\cdot y & -eye \\cdot z & 1\n\\end{pmatrix}\n$\n\n\n```js\n\n// 归一化函数\nfunction normalized(arr) {\n  let sum = 0;\n\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * arr[i];\n  }\n\n  const middle = Math.sqrt(sum);\n\n  for (let i = 0; i < arr.length; i++) {\n    arr[i] = arr[i] / middle;\n  }\n}\n\n// 叉积函数 获取法向量\nfunction cross(a, b) {\n  return new Float32Array([\n    a[1] * b[2] - a[2] * b[1],\n    a[2] * b[0] - a[0] * b[2],\n    a[0] * b[1] - a[1] * b[0],\n  ]);\n}\n\n// 点积函数 获取投影长度\nfunction dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n}\n\n// 向量差\nfunction minus(a, b) {\n  return new Float32Array([a[0] - b[0], a[1] - b[1], a[2] - b[2]]);\n}\n\n// 视图矩阵获取\nfunction getViewMatrix(\n  eyex,\n  eyey,\n  eyez,\n  lookAtx,\n  lookAty,\n  lookAtz,\n  upx,\n  upy,\n  upz\n) {\n  // 视点\n  const eye = new Float32Array([eyex, eyey, eyez]);\n  // 目标点\n  const lookAt = new Float32Array([lookAtx, lookAty, lookAtz]);\n  // 上方向\n  const up = new Float32Array([upx, upy, upz]);\n\n  // 确定z轴\n  const z = minus(eye, lookAt);\n\n  normalized(z);\n  normalized(up);\n\n  // 确定x轴\n  const x = cross(z, up);\n\n  normalized(x);\n  // 确定y轴\n  const y = cross(x, z);\n  // prettier-ignore\n  return new Float32Array([\n    x[0],       y[0],       z[0],       0,\n    x[1],       y[1],       z[1],       0,\n    x[2],       y[2],       z[2],       0,\n    -dot(x,eye),-dot(y,eye),-dot(z,eye),1\n  ])\n}\n\n```"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "### 6 正射投影矩阵\n\n\n正射投影是所有的物体投影线都垂直于最终的绘图表面\n\n![](./img/2024-01-13-16-25-37.png)\n\n先尝试将x转换到x'\n对于左右区间 有`-1 < x' < 1` 以及`l < x < r`\n将x的不等式的左右两边也转化成 (-1, 1)  具体过程如下\n\n$ 1 < x < r $\n\n先将左端变为0\n\n$ 0 < x - l < r - l $\n\n转换到[0, 2]\n\n$ 0 < \\frac{2x-2l}{r-l} < 2 $\n\n转换到[-1, 1]\n\n$ -1 < \\frac{2x-2l}{r-l} -1 < 1 $\n\n$ -1 < \\frac{2x-2l}{r-l} - \\frac{r-l}{r-l} < 1 $\n\n$ -1 < \\frac{2x-2l-r+l}{r-l} < 1 $\n\n$ -1 < \\frac{2x-r-l}{r-l} < 1 $\n\n$ -1 < \\frac{2x}{r-l} - \\frac{r+l}{r-1} < 1 $\n\n从而得到x与x'的关系\n\n$ x' = \\frac{2x}{r-l} - \\frac{r+l}{r-1} $\n\n对于上下区间 远近区间也类似处理 可以得到y与y'的关系 以及z与z'的关系\n\n$ y' = \\frac{2y}{t-b} - \\frac{t+b}{t-b} $\n\n$ z' = \\frac{-2z}{f-n} - \\frac{f+n}{r-1} $\n\n$\n\\begin{bmatrix}\n\\frac{2}{r-l} & 0 & 0 & -\\frac{r+l}{r-l}\\\\\n0 & \\frac{2}{t-b} & 0 & -\\frac{t+b}{t-b}\\\\\n0 & 0 & \\frac{-2}{f-n} & -\\frac{f+n}{f-n}\\\\ \n0 & 0 & 0 & 1\n\\end{bmatrix}\n$\n\n行列转换\n\n$\n\\begin{bmatrix}\n\\frac{2}{r-l} & 0 & 0 & 0\\\\\n0 & \\frac{2}{t-b} & 0 & 0\\\\\n0 & 0 & \\frac{-2}{f-n} & 0\\\\ \n-\\frac{r+l}{r-l} & -\\frac{t+b}{t-b} & -\\frac{f+n}{f-n} & 1\n\\end{bmatrix}\n$\n"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "### 7 透视投影\n\n![](./img/2024-01-13-16-48-14.png)\n\n先将透视投影的棱台映射为长方体\n\n![](./img/2024-01-13-16-49-54.png)\n\n![](./img/2024-01-13-16-50-12.png)\n\n\n由相似三角形得出\n\n$ x' = \\frac{n}{f}* x $\n\n$ y' = \\frac{n}{f}* y $\n\n$\n\\begin{bmatrix}\n\\frac{n}{f} & 0 & 0 \\\\\n0 & \\frac{n}{f} & 0 \\\\\n? & ? & ?\n\\end{bmatrix}\n$ *\n$\n\\begin{bmatrix}\nx \\\\\ny \\\\\nz\n\\end{bmatrix}\n$ =\n$\n\\begin{bmatrix}\n\\frac{n}{f} * x \\\\\n\\frac{n}{f} * y \\\\\n?\n\\end{bmatrix}\n$\n\n按照 齐次坐标的概念\n$\n\\begin{bmatrix}\nx \\\\\ny \\\\\nz \\\\\n1\n\\end{bmatrix}\n$\n与\n$\n\\begin{bmatrix}\nk*x \\\\\nk*y \\\\\nk*z \\\\\nk\n\\end{bmatrix}\n$\n是等价的\n\n$\n\\begin{bmatrix}\n\\frac{n}{f} * x \\\\\n\\frac{n}{f} * y \\\\\n? \\\\\n1\n\\end{bmatrix}\n$ =>\n$\n\\begin{bmatrix}\nn * x \\\\\nn * y \\\\\n? \\\\\nf\n\\end{bmatrix}\n$\n\n即\n\n$\n\\begin{bmatrix}\nn & 0 & 0 & 0\\\\\n0 &n & 0 & 0\\\\\n? & ? & ? & ?\\\\ \n0 & 0 & -1 & 0\n\\end{bmatrix}\n$ *\n$\n\\begin{bmatrix}\nx \\\\\ny \\\\\nz \\\\\n1 \n\\end{bmatrix}\n$ =\n$\n\\begin{bmatrix}\nn * x \\\\\nn * y \\\\\n? \\\\\nf\n\\end{bmatrix}\n$\n\n接下来我们看第三行\n\n按照正常的4*4矩阵\n$\n\\begin{bmatrix}\na & b & c & d \\\\\ne & f & g & h \\\\\ni & j & k & l \\\\\nm & n & o & p\n\\end{bmatrix}\n$\n\n我们假设第三行为\n$ i*x+j*y+k*z+l=z' $\n\n易知 i=0 j=0\n因为需要将梯形映射到长方体 所以z分量应该不变\n将z=-f 和z=-n 分别带入上式 可得\n$ k = b + f $\n\n$ d = n * f $\n\n从而梯形空间转向长方体空间的转换矩阵为\n\n$\n\\begin{bmatrix}\nn & 0 & 0 & 0\\\\\n0 &n & 0 & 0\\\\\n0 & 0 & n+f & nf\\\\ \n0 & 0 & -1 & 0\n\\end{bmatrix}\n$\n\n再利用前面的正射投影的矩阵得到透视投影矩阵\n\n$\n\\begin{bmatrix}\nn & 0 & 0 & 0\\\\\n0 &n & 0 & 0\\\\\n0 & 0 & n+f & nf\\\\ \n0 & 0 & -1 & 0\n\\end{bmatrix}\n$ * \n\n= \n$\n\\begin{bmatrix}\n\\frac{2n}{r-1} & 0 & 0 & 0\\\\\n0 & \\frac{2n}{t-b} & 0 & 0\\\\\n0 & 0 & \\frac{n+f}{n-f} & 2\\frac{nf}{n-f}\\\\ \n0 & 0 & -1 & 0\n\\end{bmatrix}\n$\n\n其中\n$ t = n * tan(\\frac{α}{2}) $\n\n$ b = -t $\n\n$ r = n * aspect * tan(\\frac{α}{2}) $\n\n$ l = -r $\n\n用上述变量进行替换得到最终的透视投影矩阵\n\n$\n\\begin{bmatrix}\n\\frac{1}{aspect * tan(\\frac{α}{2})} & 0 & 0 & 0\\\\\n0 & \\frac{1}{tan(\\frac{α}{2})} & 0 & 0\\\\\n0 & 0 & \\frac{n+f}{n-f} & 2\\frac{nf}{n-f}\\\\ \n0 & 0 & -1 & 0\n\\end{bmatrix}\n$"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "8. 应用示例 绘制立方体\r\n\r\n\r\n\r\n"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const vertex_code = /*glsl */ `\n    attribute vec4 aPosition;\n    attribute vec4 aColor;\n    varying vec4 vColor;\n\n    uniform mat4 mat;\n    void main() {\n        gl_Position = mat * aPosition;\n        vColor = aColor;\n    }\n`;\n\nconst fragment_code = /*glsl */ `\n    precision lowp float;\n    varying vec4 vColor;\n\n    void main() {\n        gl_FragColor = vColor;\n    }\n`;\n\nconst js_code = /*js*/ `\n    const aPosition = gl.getAttribLocation(program, 'aPosition');\n    const aColor = gl.getAttribLocation(program, 'aColor');\n    const mat = gl.getUniformLocation(program, 'mat');\n\n    // 顶点\n    const v0 = [1,1,1];\n    const v1 = [-1,1,1];\n    const v2 = [-1,-1,1];\n    const v3 = [1,-1,1];\n    const v4 = [1,-1,-1];\n    const v5 = [1,1,-1];\n    const v6 = [-1,1,-1];\n    const v7 = [-1,-1,-1];\n    /**\n     * 0_______3\n     * |       |\n     * |       |\n     * |_______|\n     * 1       2\n     */\n    // 共需6*6=36个顶点数据\n    const points = new Float32Array([\n        ...v0,...v1,...v2, ...v0,...v2, ...v3, // 前\n        ...v0,...v3,...v4, ...v0,...v4, ...v5, // 右\n        ...v0,...v5,...v6, ...v0,...v6, ...v1, // 上面\n        ...v1,...v6,...v7, ...v1,...v7, ...v2, // 左\n        ...v7,...v4,...v3, ...v7,...v3, ...v2, // 底\n        ...v4,...v7,...v6, ...v4,...v6, ...v5, // 后\n    ])\n\n    const buffer = gl.createBuffer();\n\n    const BYTES = points.BYTES_PER_ELEMENT;\n\n    gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n\n    gl.bufferData(gl.ARRAY_BUFFER, points, gl.STATIC_DRAW);\n\n    gl.vertexAttribPointer(aPosition, 3, gl.FLOAT, false, 0, 0);\n\n    gl.enableVertexAttribArray(aPosition)\n\n    const colorData = new Float32Array([\n        1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,\n        0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,\n        0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,\n        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,\n        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n        0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,\n    ])\n    const colorBuffer = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, colorBuffer);\n    gl.bufferData(gl.ARRAY_BUFFER, colorData, gl.STATIC_DRAW);\n    gl.vertexAttribPointer(aColor, 3, gl.FLOAT, false, 0, 0);\n    gl.enableVertexAttribArray(aColor)\n\n\n    let eyex = 3;\n    let eyey = 3;\n    let eyez = 5;\n\n    let deg = 0;\n    function draw() {\n        deg += 0.01;\n        const rotate = getRotateMatrix(deg);\n        const vm = getViewMatrix(eyex,eyey,eyez,0.0,0.0,0.0,0.0,0.6,0.0);\n        const perspective = getPerspective(30, ctx.width / ctx.height, 100, 1);\n        gl.enable(gl.DEPTH_TEST);\n        gl.uniformMatrix4fv(mat, false, mixMatrix(mixMatrix(perspective, vm), rotate));\n        gl.drawArrays(gl.TRIANGLES, 0, points.length / 3);\n\n        requestAnimationFrame(draw)\n    }\n\n    draw()\n`;\nconst { renderWebgl, getLibs } = require(\"../../src/display.js\");\nconst path = require('path');\nconst libs = getLibs(path.resolve(__dirname, \"../../src/libs.js\"));\nrenderWebgl(vertex_code, fragment_code, js_code, libs);\n"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "text/html",
                            "value": [
                                "<style> table, th, tr { text-align: left; }</style>",
                                "      <script>",
                                "          { // 限制变量定义域",
                                "              function initShader(gl, VERTEX_SHADER_SOURCE, FRAGMENT_SHADER_SOURCE) {\r",
                                "  const vertexShader = gl.createShader(gl.VERTEX_SHADER);\r",
                                "  const fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);\r",
                                "\r",
                                "  gl.shaderSource(vertexShader, VERTEX_SHADER_SOURCE); // 指定顶点着色器的源码\r",
                                "  gl.shaderSource(fragmentShader, FRAGMENT_SHADER_SOURCE); // 指定片元着色器的源码\r",
                                "\r",
                                "  // 编译着色器\r",
                                "  gl.compileShader(vertexShader);\r",
                                "  gl.compileShader(fragmentShader);\r",
                                "\r",
                                "  // 创建一个程序对象\r",
                                "  const program = gl.createProgram();\r",
                                "\r",
                                "  gl.attachShader(program, vertexShader);\r",
                                "  gl.attachShader(program, fragmentShader);\r",
                                "\r",
                                "  gl.linkProgram(program);\r",
                                "\r",
                                "  gl.useProgram(program);\r",
                                "\r",
                                "  return program;\r",
                                "}\r",
                                "\r",
                                "// 平移矩阵\r",
                                "function getTranslateMatrix(x = 0, y = 0, z = 0) {\r",
                                "  // prettier-ignore\r",
                                "  return new Float32Array([\r",
                                "    1.0, 0.0, 0.0, 0.0,\r",
                                "    0.0, 1.0, 0.0, 0.0,\r",
                                "    0.0, 0.0, 1.0, 0.0,\r",
                                "    x  , y  , z  , 1,\r",
                                "  ])\r",
                                "}\r",
                                "// 缩放矩阵\r",
                                "function getScaleMatrix(x = 1, y = 1, z = 1) {\r",
                                "  // prettier-ignore\r",
                                "  return new Float32Array([\r",
                                "    x  , 0.0, 0.0, 0.0,\r",
                                "    0.0, y  , 0.0, 0.0,\r",
                                "    0.0, 0.0, z  , 0.0,\r",
                                "    0.0, 0.0, 0.0, 1,\r",
                                "  ])\r",
                                "}\r",
                                "// 绕z轴旋转的旋转矩阵\r",
                                "function getRotateMatrix(deg) {\r",
                                "  // prettier-ignore\r",
                                "  return new Float32Array([\r",
                                "    Math.cos(deg),  Math.sin(deg), 0.0,0.0,\r",
                                "    -Math.sin(deg), Math.cos(deg), 0.0,0.0,\r",
                                "    0.0,            0.0,           1.0,0.0,\r",
                                "    0.0,            0.0,           0.0, 1,\r",
                                "  ])\r",
                                "}\r",
                                "\r",
                                "// 矩阵复合函数\r",
                                "function mixMatrix(A, B) {\r",
                                "  const result = new Float32Array(16);\r",
                                "\r",
                                "  for (let i = 0; i < 4; i++) {\r",
                                "    result[i] =\r",
                                "      A[i] * B[0] + A[i + 4] * B[1] + A[i + 8] * B[2] + A[i + 12] * B[3];\r",
                                "    result[i + 4] =\r",
                                "      A[i] * B[4] + A[i + 4] * B[5] + A[i + 8] * B[6] + A[i + 12] * B[7];\r",
                                "    result[i + 8] =\r",
                                "      A[i] * B[8] + A[i + 4] * B[9] + A[i + 8] * B[10] + A[i + 12] * B[11];\r",
                                "    result[i + 12] =\r",
                                "      A[i] * B[12] + A[i + 4] * B[13] + A[i + 8] * B[14] + A[i + 12] * B[15];\r",
                                "  }\r",
                                "\r",
                                "  return result;\r",
                                "}\r",
                                "\r",
                                "// 归一化函数\r",
                                "function normalized(arr) {\r",
                                "  let sum = 0;\r",
                                "\r",
                                "  for (let i = 0; i < arr.length; i++) {\r",
                                "    sum += arr[i] * arr[i];\r",
                                "  }\r",
                                "\r",
                                "  const middle = Math.sqrt(sum);\r",
                                "\r",
                                "  for (let i = 0; i < arr.length; i++) {\r",
                                "    arr[i] = arr[i] / middle;\r",
                                "  }\r",
                                "}\r",
                                "\r",
                                "// 叉积函数 获取法向量\r",
                                "function cross(a, b) {\r",
                                "  return new Float32Array([\r",
                                "    a[1] * b[2] - a[2] * b[1],\r",
                                "    a[2] * b[0] - a[0] * b[2],\r",
                                "    a[0] * b[1] - a[1] * b[0],\r",
                                "  ]);\r",
                                "}\r",
                                "\r",
                                "// 点积函数 获取投影长度\r",
                                "function dot(a, b) {\r",
                                "  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\r",
                                "}\r",
                                "\r",
                                "// 向量差\r",
                                "function minus(a, b) {\r",
                                "  return new Float32Array([a[0] - b[0], a[1] - b[1], a[2] - b[2]]);\r",
                                "}\r",
                                "\r",
                                "// 视图矩阵获取\r",
                                "function getViewMatrix(\r",
                                "  eyex,\r",
                                "  eyey,\r",
                                "  eyez,\r",
                                "  lookAtx,\r",
                                "  lookAty,\r",
                                "  lookAtz,\r",
                                "  upx,\r",
                                "  upy,\r",
                                "  upz\r",
                                ") {\r",
                                "  // 视点\r",
                                "  const eye = new Float32Array([eyex, eyey, eyez]);\r",
                                "  // 目标点\r",
                                "  const lookAt = new Float32Array([lookAtx, lookAty, lookAtz]);\r",
                                "  // 上方向\r",
                                "  const up = new Float32Array([upx, upy, upz]);\r",
                                "\r",
                                "  // 确定z轴\r",
                                "  const z = minus(eye, lookAt);\r",
                                "\r",
                                "  normalized(z);\r",
                                "  normalized(up);\r",
                                "\r",
                                "  // 确定x轴\r",
                                "  const x = cross(z, up);\r",
                                "\r",
                                "  normalized(x);\r",
                                "  // 确定y轴\r",
                                "  const y = cross(x, z);\r",
                                "  // prettier-ignore\r",
                                "  return new Float32Array([\r",
                                "    x[0],       y[0],       z[0],       0,\r",
                                "    x[1],       y[1],       z[1],       0,\r",
                                "    x[2],       y[2],       z[2],       0,\r",
                                "    -dot(x,eye),-dot(y,eye),-dot(z,eye),1\r",
                                "  ])\r",
                                "}\r",
                                "\r",
                                "// 获取正射投影矩阵\r",
                                "function getOrtho(l, r, t, b, n, f) {\r",
                                "  // prettier-ignore\r",
                                "  return new Float32Array([\r",
                                "    2 / (r - l), 0,           0,           0,\r",
                                "    0,           2/(t-b),     0,           0,\r",
                                "    0,           0,           -2/(f-n),    0,\r",
                                "    -(r+l)/(r-l),-(t+b)/(t-b),-(f+n)/(f-n),1\r",
                                "  ])\r",
                                "}\r",
                                "\r",
                                "\r",
                                "// 获取透视投影矩阵\r",
                                "function getPerspective(fov, aspect, far, near) {\r",
                                "  fov = (fov * Math.PI) / 180;\r",
                                "  // prettier-ignore\r",
                                "  return new Float32Array([\r",
                                "    1/(aspect*Math.tan(fov / 2)), 0,                   0,                      0,\r",
                                "    0,                            1/(Math.tan(fov/2)), 0,                      0,\r",
                                "    0,                            0,                   -(far+near)/(far-near), -(2*far*near)/(far-near),\r",
                                "    0,                            0,                   -1,                     0,\r",
                                "  ])\r",
                                "}\r",
                                "\r",
                                "function distanceSelf(a, b) {\r",
                                "  const x = a[0] - b[0];\r",
                                "  const y = a[1] - b[1];\r",
                                "  const z = a[2] - b[2];\r",
                                "\r",
                                "  const v = x * x + y * y + z * z;\r",
                                "\r",
                                "  return Math.sqrt(v);\r",
                                "}\r",
                                "",
                                "          }",
                                "      </script>",
                                "  ",
                                "        <canvas id=\"305ebde0-c676-11ee-9206-957d3f1e7722\" width=\"400\" height=\"400\" style=\"border:1px solid grey\">",
                                "            此浏览器不支持canvas",
                                "        </canvas>",
                                "        <script>",
                                "            { // 限制变量定义域",
                                "                ",
                                "        const ctx = document.getElementById('305ebde0-c676-11ee-9206-957d3f1e7722');",
                                "        const gl = ctx.getContext('webgl');",
                                "        const vertexShader = gl.createShader(gl.VERTEX_SHADER);",
                                "        const fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);",
                                "    ",
                                "        gl.shaderSource(vertexShader,  \"\\n    attribute vec4 aPosition;\\n    attribute vec4 aColor;\\n    varying vec4 vColor;\\n\\n    uniform mat4 mat;\\n    void main() {\\n        gl_Position = mat * aPosition;\\n        vColor = aColor;\\n    }\\n\"); // 指定顶点着色器的源码",
                                "        gl.shaderSource(fragmentShader,  \"\\n    precision lowp float;\\n    varying vec4 vColor;\\n\\n    void main() {\\n        gl_FragColor = vColor;\\n    }\\n\"); // 指定片元着色器的源码",
                                "    ",
                                "        // 编译着色器",
                                "        gl.compileShader(vertexShader);",
                                "        gl.compileShader(fragmentShader);",
                                "    ",
                                "        // 创建一个程序对象",
                                "        const program = gl.createProgram();",
                                "    ",
                                "        gl.attachShader(program, vertexShader);",
                                "        gl.attachShader(program, fragmentShader);",
                                "    ",
                                "        gl.linkProgram(program);",
                                "    ",
                                "        gl.useProgram(program);",
                                "    ",
                                "    const aPosition = gl.getAttribLocation(program, 'aPosition');",
                                "    const aColor = gl.getAttribLocation(program, 'aColor');",
                                "    const mat = gl.getUniformLocation(program, 'mat');",
                                "",
                                "    // 顶点",
                                "    const v0 = [1,1,1];",
                                "    const v1 = [-1,1,1];",
                                "    const v2 = [-1,-1,1];",
                                "    const v3 = [1,-1,1];",
                                "    const v4 = [1,-1,-1];",
                                "    const v5 = [1,1,-1];",
                                "    const v6 = [-1,1,-1];",
                                "    const v7 = [-1,-1,-1];",
                                "    /**",
                                "     * 0_______3",
                                "     * |       |",
                                "     * |       |",
                                "     * |_______|",
                                "     * 1       2",
                                "     */",
                                "    // 共需6*6=36个顶点数据",
                                "    const points = new Float32Array([",
                                "        ...v0,...v1,...v2, ...v0,...v2, ...v3, // 前",
                                "        ...v0,...v3,...v4, ...v0,...v4, ...v5, // 右",
                                "        ...v0,...v5,...v6, ...v0,...v6, ...v1, // 上面",
                                "        ...v1,...v6,...v7, ...v1,...v7, ...v2, // 左",
                                "        ...v7,...v4,...v3, ...v7,...v3, ...v2, // 底",
                                "        ...v4,...v7,...v6, ...v4,...v6, ...v5, // 后",
                                "    ])",
                                "",
                                "    const buffer = gl.createBuffer();",
                                "",
                                "    const BYTES = points.BYTES_PER_ELEMENT;",
                                "",
                                "    gl.bindBuffer(gl.ARRAY_BUFFER, buffer);",
                                "",
                                "    gl.bufferData(gl.ARRAY_BUFFER, points, gl.STATIC_DRAW);",
                                "",
                                "    gl.vertexAttribPointer(aPosition, 3, gl.FLOAT, false, 0, 0);",
                                "",
                                "    gl.enableVertexAttribArray(aPosition)",
                                "",
                                "    const colorData = new Float32Array([",
                                "        1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,",
                                "        0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,",
                                "        0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,",
                                "        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,",
                                "        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,",
                                "        0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,",
                                "    ])",
                                "    const colorBuffer = gl.createBuffer();",
                                "    gl.bindBuffer(gl.ARRAY_BUFFER, colorBuffer);",
                                "    gl.bufferData(gl.ARRAY_BUFFER, colorData, gl.STATIC_DRAW);",
                                "    gl.vertexAttribPointer(aColor, 3, gl.FLOAT, false, 0, 0);",
                                "    gl.enableVertexAttribArray(aColor)",
                                "",
                                "",
                                "    let eyex = 3;",
                                "    let eyey = 3;",
                                "    let eyez = 5;",
                                "",
                                "    let deg = 0;",
                                "    function draw() {",
                                "        deg += 0.01;",
                                "        const rotate = getRotateMatrix(deg);",
                                "        const vm = getViewMatrix(eyex,eyey,eyez,0.0,0.0,0.0,0.0,0.6,0.0);",
                                "        const perspective = getPerspective(30, ctx.width / ctx.height, 100, 1);",
                                "        gl.enable(gl.DEPTH_TEST);",
                                "        gl.uniformMatrix4fv(mat, false, mixMatrix(mixMatrix(perspective, vm), rotate));",
                                "        gl.drawArrays(gl.TRIANGLES, 0, points.length / 3);",
                                "",
                                "        requestAnimationFrame(draw)",
                                "    }",
                                "",
                                "    draw()",
                                "",
                                "            }",
                                "        </script>",
                                "    "
                            ]
                        }
                    ]
                },
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "javascript",
            "source": [
                "const vertex_code = /*glsl */ `\n    attribute vec4 aPosition;\n    attribute vec4 aColor;\n    varying vec4 vColor;\n\n    uniform mat4 mat;\n    void main() {\n      gl_Position = mat * aPosition;\n      vColor = aColor;\n    }\n`;\n\nconst fragment_code = /*glsl */ `\n    precision lowp float;\n    varying vec4 vColor;\n\n    void main() {\n      gl_FragColor = vColor;\n    }\n`;\n\nconst js_code = /*js*/ `\n  const aPosition = gl.getAttribLocation(program, 'aPosition');\n  const aColor = gl.getAttribLocation(program, 'aColor');\n  const mat = gl.getUniformLocation(program, 'mat');\n  // 需要6*4=24个顶点数据\n  const vertices = new Float32Array([\n    // 0123\n    1, 1, 1,\n    -1, 1,1,\n    -1,-1,1,\n    1,-1, 1,\n    // 0345\n    1, 1, 1,\n    1,-1, 1,\n    1,-1,-1,\n    1, 1,-1,\n    // 0156\n    1, 1, 1,\n    1, 1,-1,\n    -1,1,-1,\n    -1,1, 1,\n    // 1267\n    -1, 1, 1,\n    -1, 1,-1,\n    -1,-1,-1,\n    -1,-1, 1,\n    // 2347\n    -1,-1, 1,\n     1,-1, 1,\n     1,-1,-1,\n    -1,-1,-1,\n    // 4567\n    1,-1,-1,\n    1, 1,-1,\n    -1, 1,-1,\n    -1,-1,-1,\n  ])\n\n  /*\n    1, 1, 1,   0\n    -1, 1, 1,   1\n    -1,-1, 1,   2\n    1,-1, 1,   3\n    1,-1,-1,   4\n    1, 1,-1,   5\n    -1, 1,-1,   6\n    -1,-1,-1,   7\n  * */\n  const buffer = gl.createBuffer();\n  gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n  gl.bufferData(gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW);\n  gl.vertexAttribPointer(aPosition, 3, gl.FLOAT, false, 0, 0);\n  gl.enableVertexAttribArray(aPosition)\n  // 24个顶点对应的颜色数据\n  const colors = new Float32Array([\n    0.4,0.4,1.0,\n    0.4,0.4,1.0,\n    0.4,0.4,1.0,\n    0.4,0.4,1.0,\n    0.4,1.0,0.4,\n    0.4,1.0,0.4,\n    0.4,1.0,0.4,\n    0.4,1.0,0.4,\n    1.0,0.4,0.4,\n    1.0,0.4,0.4,\n    1.0,0.4,0.4,\n    1.0,0.4,0.4,\n    1.0,1.0,0.4,\n    1.0,1.0,0.4,\n    1.0,1.0,0.4,\n    1.0,1.0,0.4,\n    1.0,0.0,1.0,\n    1.0,0.0,1.0,\n    1.0,0.0,1.0,\n    1.0,0.0,1.0,\n    0.0,1.0,1.0,\n    0.0,1.0,1.0,\n    0.0,1.0,1.0,\n    0.0,1.0,1.0,\n  ])\n\n  const colorBuffer = gl.createBuffer();\n  gl.bindBuffer(gl.ARRAY_BUFFER, colorBuffer);\n  gl.bufferData(gl.ARRAY_BUFFER, colors, gl.STATIC_DRAW);\n  gl.vertexAttribPointer(aColor, 3, gl.FLOAT, false, 0, 0);\n  gl.enableVertexAttribArray(aColor)\n\n  const indices = new Uint8Array([\n     0, 1, 2, 0, 2, 3,\n     4, 5, 6, 4, 6, 7,\n     8, 9,10, 8,10,11,\n    12,13,14,12,14,15,\n    16,17,18,16,18,19,\n    20,21,22,20,22,23,\n  ])\n  const indexBuffer = gl.createBuffer();\n  gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indexBuffer);\n  gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, indices, gl.STATIC_DRAW);\n\n  let eyex = 3;\n  let eyey = 3;\n  let eyez = 5;\n\n  let deg = 0;\n  function draw() {\n    deg += 0.01;\n    const rotate = getRotateMatrix(deg);\n    const vm = getViewMatrix(eyex,eyey,eyez,0.0,0.0,0.0,0.0,0.6,0.0);\n    const perspective = getPerspective(30, ctx.width / ctx.height, 100, 1);\n    gl.enable(gl.DEPTH_TEST);\n    gl.uniformMatrix4fv(mat, false, mixMatrix(mixMatrix(perspective, vm), rotate));\n    gl.drawElements(gl.TRIANGLES, indices.length, gl.UNSIGNED_BYTE, 0);\n\n    requestAnimationFrame(draw)\n  }\n\n  draw()\n`;\nconst { renderWebgl } = require(\"../../src/display.js\");\nrenderWebgl(vertex_code, fragment_code, js_code);\n"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "text/html",
                            "value": [
                                "<style> table, th, tr { text-align: left; }</style>",
                                "      <script>",
                                "          { // 限制变量定义域",
                                "              function initShader(gl, VERTEX_SHADER_SOURCE, FRAGMENT_SHADER_SOURCE) {\r",
                                "  const vertexShader = gl.createShader(gl.VERTEX_SHADER);\r",
                                "  const fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);\r",
                                "\r",
                                "  gl.shaderSource(vertexShader, VERTEX_SHADER_SOURCE); // 指定顶点着色器的源码\r",
                                "  gl.shaderSource(fragmentShader, FRAGMENT_SHADER_SOURCE); // 指定片元着色器的源码\r",
                                "\r",
                                "  // 编译着色器\r",
                                "  gl.compileShader(vertexShader);\r",
                                "  gl.compileShader(fragmentShader);\r",
                                "\r",
                                "  // 创建一个程序对象\r",
                                "  const program = gl.createProgram();\r",
                                "\r",
                                "  gl.attachShader(program, vertexShader);\r",
                                "  gl.attachShader(program, fragmentShader);\r",
                                "\r",
                                "  gl.linkProgram(program);\r",
                                "\r",
                                "  gl.useProgram(program);\r",
                                "\r",
                                "  return program;\r",
                                "}\r",
                                "\r",
                                "// 平移矩阵\r",
                                "function getTranslateMatrix(x = 0, y = 0, z = 0) {\r",
                                "  // prettier-ignore\r",
                                "  return new Float32Array([\r",
                                "    1.0, 0.0, 0.0, 0.0,\r",
                                "    0.0, 1.0, 0.0, 0.0,\r",
                                "    0.0, 0.0, 1.0, 0.0,\r",
                                "    x  , y  , z  , 1,\r",
                                "  ])\r",
                                "}\r",
                                "// 缩放矩阵\r",
                                "function getScaleMatrix(x = 1, y = 1, z = 1) {\r",
                                "  // prettier-ignore\r",
                                "  return new Float32Array([\r",
                                "    x  , 0.0, 0.0, 0.0,\r",
                                "    0.0, y  , 0.0, 0.0,\r",
                                "    0.0, 0.0, z  , 0.0,\r",
                                "    0.0, 0.0, 0.0, 1,\r",
                                "  ])\r",
                                "}\r",
                                "// 绕z轴旋转的旋转矩阵\r",
                                "function getRotateMatrix(deg) {\r",
                                "  // prettier-ignore\r",
                                "  return new Float32Array([\r",
                                "    Math.cos(deg),  Math.sin(deg), 0.0,0.0,\r",
                                "    -Math.sin(deg), Math.cos(deg), 0.0,0.0,\r",
                                "    0.0,            0.0,           1.0,0.0,\r",
                                "    0.0,            0.0,           0.0, 1,\r",
                                "  ])\r",
                                "}\r",
                                "\r",
                                "// 矩阵复合函数\r",
                                "function mixMatrix(A, B) {\r",
                                "  const result = new Float32Array(16);\r",
                                "\r",
                                "  for (let i = 0; i < 4; i++) {\r",
                                "    result[i] =\r",
                                "      A[i] * B[0] + A[i + 4] * B[1] + A[i + 8] * B[2] + A[i + 12] * B[3];\r",
                                "    result[i + 4] =\r",
                                "      A[i] * B[4] + A[i + 4] * B[5] + A[i + 8] * B[6] + A[i + 12] * B[7];\r",
                                "    result[i + 8] =\r",
                                "      A[i] * B[8] + A[i + 4] * B[9] + A[i + 8] * B[10] + A[i + 12] * B[11];\r",
                                "    result[i + 12] =\r",
                                "      A[i] * B[12] + A[i + 4] * B[13] + A[i + 8] * B[14] + A[i + 12] * B[15];\r",
                                "  }\r",
                                "\r",
                                "  return result;\r",
                                "}\r",
                                "\r",
                                "// 归一化函数\r",
                                "function normalized(arr) {\r",
                                "  let sum = 0;\r",
                                "\r",
                                "  for (let i = 0; i < arr.length; i++) {\r",
                                "    sum += arr[i] * arr[i];\r",
                                "  }\r",
                                "\r",
                                "  const middle = Math.sqrt(sum);\r",
                                "\r",
                                "  for (let i = 0; i < arr.length; i++) {\r",
                                "    arr[i] = arr[i] / middle;\r",
                                "  }\r",
                                "}\r",
                                "\r",
                                "// 叉积函数 获取法向量\r",
                                "function cross(a, b) {\r",
                                "  return new Float32Array([\r",
                                "    a[1] * b[2] - a[2] * b[1],\r",
                                "    a[2] * b[0] - a[0] * b[2],\r",
                                "    a[0] * b[1] - a[1] * b[0],\r",
                                "  ]);\r",
                                "}\r",
                                "\r",
                                "// 点积函数 获取投影长度\r",
                                "function dot(a, b) {\r",
                                "  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\r",
                                "}\r",
                                "\r",
                                "// 向量差\r",
                                "function minus(a, b) {\r",
                                "  return new Float32Array([a[0] - b[0], a[1] - b[1], a[2] - b[2]]);\r",
                                "}\r",
                                "\r",
                                "// 视图矩阵获取\r",
                                "function getViewMatrix(\r",
                                "  eyex,\r",
                                "  eyey,\r",
                                "  eyez,\r",
                                "  lookAtx,\r",
                                "  lookAty,\r",
                                "  lookAtz,\r",
                                "  upx,\r",
                                "  upy,\r",
                                "  upz\r",
                                ") {\r",
                                "  // 视点\r",
                                "  const eye = new Float32Array([eyex, eyey, eyez]);\r",
                                "  // 目标点\r",
                                "  const lookAt = new Float32Array([lookAtx, lookAty, lookAtz]);\r",
                                "  // 上方向\r",
                                "  const up = new Float32Array([upx, upy, upz]);\r",
                                "\r",
                                "  // 确定z轴\r",
                                "  const z = minus(eye, lookAt);\r",
                                "\r",
                                "  normalized(z);\r",
                                "  normalized(up);\r",
                                "\r",
                                "  // 确定x轴\r",
                                "  const x = cross(z, up);\r",
                                "\r",
                                "  normalized(x);\r",
                                "  // 确定y轴\r",
                                "  const y = cross(x, z);\r",
                                "  // prettier-ignore\r",
                                "  return new Float32Array([\r",
                                "    x[0],       y[0],       z[0],       0,\r",
                                "    x[1],       y[1],       z[1],       0,\r",
                                "    x[2],       y[2],       z[2],       0,\r",
                                "    -dot(x,eye),-dot(y,eye),-dot(z,eye),1\r",
                                "  ])\r",
                                "}\r",
                                "\r",
                                "// 获取正射投影矩阵\r",
                                "function getOrtho(l, r, t, b, n, f) {\r",
                                "  // prettier-ignore\r",
                                "  return new Float32Array([\r",
                                "    2 / (r - l), 0,           0,           0,\r",
                                "    0,           2/(t-b),     0,           0,\r",
                                "    0,           0,           -2/(f-n),    0,\r",
                                "    -(r+l)/(r-l),-(t+b)/(t-b),-(f+n)/(f-n),1\r",
                                "  ])\r",
                                "}\r",
                                "\r",
                                "\r",
                                "// 获取透视投影矩阵\r",
                                "function getPerspective(fov, aspect, far, near) {\r",
                                "  fov = (fov * Math.PI) / 180;\r",
                                "  // prettier-ignore\r",
                                "  return new Float32Array([\r",
                                "    1/(aspect*Math.tan(fov / 2)), 0,                   0,                      0,\r",
                                "    0,                            1/(Math.tan(fov/2)), 0,                      0,\r",
                                "    0,                            0,                   -(far+near)/(far-near), -(2*far*near)/(far-near),\r",
                                "    0,                            0,                   -1,                     0,\r",
                                "  ])\r",
                                "}\r",
                                "\r",
                                "function distanceSelf(a, b) {\r",
                                "  const x = a[0] - b[0];\r",
                                "  const y = a[1] - b[1];\r",
                                "  const z = a[2] - b[2];\r",
                                "\r",
                                "  const v = x * x + y * y + z * z;\r",
                                "\r",
                                "  return Math.sqrt(v);\r",
                                "}\r",
                                "",
                                "          }",
                                "      </script>",
                                "  ",
                                "        <canvas id=\"4ae29d30-c676-11ee-9206-957d3f1e7722\" width=\"400\" height=\"400\" style=\"border:1px solid grey\">",
                                "            此浏览器不支持canvas",
                                "        </canvas>",
                                "        <script>",
                                "            { // 限制变量定义域",
                                "                ",
                                "        const ctx = document.getElementById('4ae29d30-c676-11ee-9206-957d3f1e7722');",
                                "        const gl = ctx.getContext('webgl');",
                                "        const vertexShader = gl.createShader(gl.VERTEX_SHADER);",
                                "        const fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);",
                                "    ",
                                "        gl.shaderSource(vertexShader,  \"\\n    attribute vec4 aPosition;\\n    attribute vec4 aColor;\\n    varying vec4 vColor;\\n\\n    uniform mat4 mat;\\n    void main() {\\n      gl_Position = mat * aPosition;\\n      vColor = aColor;\\n    }\\n\"); // 指定顶点着色器的源码",
                                "        gl.shaderSource(fragmentShader,  \"\\n    precision lowp float;\\n    varying vec4 vColor;\\n\\n    void main() {\\n      gl_FragColor = vColor;\\n    }\\n\"); // 指定片元着色器的源码",
                                "    ",
                                "        // 编译着色器",
                                "        gl.compileShader(vertexShader);",
                                "        gl.compileShader(fragmentShader);",
                                "    ",
                                "        // 创建一个程序对象",
                                "        const program = gl.createProgram();",
                                "    ",
                                "        gl.attachShader(program, vertexShader);",
                                "        gl.attachShader(program, fragmentShader);",
                                "    ",
                                "        gl.linkProgram(program);",
                                "    ",
                                "        gl.useProgram(program);",
                                "    ",
                                "  const aPosition = gl.getAttribLocation(program, 'aPosition');",
                                "  const aColor = gl.getAttribLocation(program, 'aColor');",
                                "  const mat = gl.getUniformLocation(program, 'mat');",
                                "  // 需要6*4=24个顶点数据",
                                "  const vertices = new Float32Array([",
                                "    // 0123",
                                "    1, 1, 1,",
                                "    -1, 1,1,",
                                "    -1,-1,1,",
                                "    1,-1, 1,",
                                "    // 0345",
                                "    1, 1, 1,",
                                "    1,-1, 1,",
                                "    1,-1,-1,",
                                "    1, 1,-1,",
                                "    // 0156",
                                "    1, 1, 1,",
                                "    1, 1,-1,",
                                "    -1,1,-1,",
                                "    -1,1, 1,",
                                "    // 1267",
                                "    -1, 1, 1,",
                                "    -1, 1,-1,",
                                "    -1,-1,-1,",
                                "    -1,-1, 1,",
                                "    // 2347",
                                "    -1,-1, 1,",
                                "     1,-1, 1,",
                                "     1,-1,-1,",
                                "    -1,-1,-1,",
                                "    // 4567",
                                "    1,-1,-1,",
                                "    1, 1,-1,",
                                "    -1, 1,-1,",
                                "    -1,-1,-1,",
                                "  ])",
                                "",
                                "  /*",
                                "    1, 1, 1,   0",
                                "    -1, 1, 1,   1",
                                "    -1,-1, 1,   2",
                                "    1,-1, 1,   3",
                                "    1,-1,-1,   4",
                                "    1, 1,-1,   5",
                                "    -1, 1,-1,   6",
                                "    -1,-1,-1,   7",
                                "  * */",
                                "  const buffer = gl.createBuffer();",
                                "  gl.bindBuffer(gl.ARRAY_BUFFER, buffer);",
                                "  gl.bufferData(gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW);",
                                "  gl.vertexAttribPointer(aPosition, 3, gl.FLOAT, false, 0, 0);",
                                "  gl.enableVertexAttribArray(aPosition)",
                                "  // 24个顶点对应的颜色数据",
                                "  const colors = new Float32Array([",
                                "    0.4,0.4,1.0,",
                                "    0.4,0.4,1.0,",
                                "    0.4,0.4,1.0,",
                                "    0.4,0.4,1.0,",
                                "    0.4,1.0,0.4,",
                                "    0.4,1.0,0.4,",
                                "    0.4,1.0,0.4,",
                                "    0.4,1.0,0.4,",
                                "    1.0,0.4,0.4,",
                                "    1.0,0.4,0.4,",
                                "    1.0,0.4,0.4,",
                                "    1.0,0.4,0.4,",
                                "    1.0,1.0,0.4,",
                                "    1.0,1.0,0.4,",
                                "    1.0,1.0,0.4,",
                                "    1.0,1.0,0.4,",
                                "    1.0,0.0,1.0,",
                                "    1.0,0.0,1.0,",
                                "    1.0,0.0,1.0,",
                                "    1.0,0.0,1.0,",
                                "    0.0,1.0,1.0,",
                                "    0.0,1.0,1.0,",
                                "    0.0,1.0,1.0,",
                                "    0.0,1.0,1.0,",
                                "  ])",
                                "",
                                "  const colorBuffer = gl.createBuffer();",
                                "  gl.bindBuffer(gl.ARRAY_BUFFER, colorBuffer);",
                                "  gl.bufferData(gl.ARRAY_BUFFER, colors, gl.STATIC_DRAW);",
                                "  gl.vertexAttribPointer(aColor, 3, gl.FLOAT, false, 0, 0);",
                                "  gl.enableVertexAttribArray(aColor)",
                                "",
                                "  const indeces = new Uint8Array([",
                                "     0, 1, 2, 0, 2, 3,",
                                "     4, 5, 6, 4, 6, 7,",
                                "     8, 9,10, 8,10,11,",
                                "    12,13,14,12,14,15,",
                                "    16,17,18,16,18,19,",
                                "    20,21,22,20,22,23,",
                                "  ])",
                                "  const indexBuffer = gl.createBuffer();",
                                "  gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indexBuffer);",
                                "  gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, indeces, gl.STATIC_DRAW);",
                                "",
                                "  let eyex = 3;",
                                "  let eyey = 3;",
                                "  let eyez = 5;",
                                "",
                                "  let deg = 0;",
                                "  function draw() {",
                                "    deg += 0.01;",
                                "    const rotate = getRotateMatrix(deg);",
                                "    const vm = getViewMatrix(eyex,eyey,eyez,0.0,0.0,0.0,0.0,0.6,0.0);",
                                "    const perspective = getPerspective(30, ctx.width / ctx.height, 100, 1);",
                                "    gl.enable(gl.DEPTH_TEST);",
                                "    gl.uniformMatrix4fv(mat, false, mixMatrix(mixMatrix(perspective, vm), rotate));",
                                "    gl.drawElements(gl.TRIANGLES, indeces.length, gl.UNSIGNED_BYTE, 0);",
                                "",
                                "    requestAnimationFrame(draw)",
                                "  }",
                                "",
                                "  draw()",
                                "",
                                "            }",
                                "        </script>",
                                "    "
                            ]
                        }
                    ]
                },
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "javascript",
            "source": [
                "// 创建着色器源码\nconst vertex_code = /*glsl*/ `\n  attribute vec4 aPosition;\n  attribute vec4 aNormal;\n  varying vec4 vColor;\n  uniform mat4 mat;\n  void main() {\n    // 定义点光源的颜色\n    vec3 uPointLightColor = vec3(1.0,1.0,0.0);\n    // 点光源的位置\n    vec3 uPointLightPosition = vec3(-5.0,6.0,10.0);\n    // 环境光\n    vec3 uAmbientLightColor = vec3(0.2,0.2,0.2);\n    // 物体表面的颜色\n    vec4 aColor = vec4(1.0,0.0,0.0,1.0);\n    // 顶点的世界坐标\n    vec4 vertexPosition = mat * aPosition;\n    // 点光源的方向\n    vec3 lightDirection = normalize(uPointLightPosition - vec3(vertexPosition));\n    // 环境反射\n    vec3 ambient = uAmbientLightColor * vec3(aColor);\n    // 计算入射角 光线方向和法线方向的点积\n    float dotDeg = dot(lightDirection, vec3(aNormal));\n    // 漫反射光的颜色\n    vec3 diffuseColor = uPointLightColor * vec3(aColor) * dotDeg;\n    gl_Position = vertexPosition;\n    vColor = vec4(ambient + diffuseColor, aColor.a);\n  }\n`; // 顶点着色器\n\nconst fragment_code = /*glsl*/ `\n  precision lowp float;\n  varying vec4 vColor;\n\n  void main() {\n    gl_FragColor = vColor;\n  }\n`; // 片元着色器\n\nconst js_code = /*js */ `\n  const aPosition = gl.getAttribLocation(program, \"aPosition\");\n  const aNormal = gl.getAttribLocation(program, \"aNormal\");\n  const mat = gl.getUniformLocation(program, \"mat\");\n\n  const vertices = new Float32Array([\n    // 0123\n    1, 1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1,\n    // 0345\n    1, 1, 1, 1, -1, 1, 1, -1, -1, 1, 1, -1,\n    // 0156\n    1, 1, 1, 1, 1, -1, -1, 1, -1, -1, 1, 1,\n    // 1267\n    -1, 1, 1, -1, 1, -1, -1, -1, -1, -1, -1, 1,\n    // 2347\n    -1, -1, 1, 1, -1, 1, 1, -1, -1, -1, -1, -1,\n    // 4567\n    1, -1, -1, 1, 1, -1, -1, 1, -1, -1, -1, -1,\n  ]);\n\n  const buffer = gl.createBuffer();\n  gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n  gl.bufferData(gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW);\n  gl.vertexAttribPointer(aPosition, 3, gl.FLOAT, false, 0, 0);\n  gl.enableVertexAttribArray(aPosition);\n\n  // 法向量\n  const normals = new Float32Array([\n    0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, -1.0,\n    0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, -1.0, 0.0, 0.0, -1.0, 0.0,\n    0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0,\n    0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0,\n    0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0,\n  ]);\n  const normalBuffer = gl.createBuffer();\n  gl.bindBuffer(gl.ARRAY_BUFFER, normalBuffer);\n  gl.bufferData(gl.ARRAY_BUFFER, normals, gl.STATIC_DRAW);\n  gl.vertexAttribPointer(aNormal, 3, gl.FLOAT, false, 0, 0);\n  gl.enableVertexAttribArray(aNormal);\n\n  const indices = new Uint8Array([\n    0, 1, 2, 0, 2, 3, 4, 5, 6, 4, 6, 7, 8, 9, 10, 8, 10, 11, 12, 13, 14, 12, 14,\n    15, 16, 17, 18, 16, 18, 19, 20, 21, 22, 20, 22, 23,\n  ]);\n  const indexBuffer = gl.createBuffer();\n  gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indexBuffer);\n  gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, indices, gl.STATIC_DRAW);\n\n  const camera = {\n    position: [3,3,5],\n    look_at: [0.0, 0.0, 0.0],\n    up: [ 0.0, 0.6, 0.0],\n    fov:30,\n    aspect:ctx.width / ctx.height,\n    far:100,\n    near:1\n  }\n  let deg = 0;\n  function draw() {\n    deg += 0.01;\n    const rotate = getRotateMatrix(deg);\n    // 视图矩阵和投影矩阵其实就可以抽象成摄像机\n    const vm = getViewMatrix(...camera.position, camera.look_at, camera.up);\n    const perspective = getPerspective(camera.fov, camera.aspect, camera.far, camera.near);\n    gl.enable(gl.DEPTH_TEST);\n    gl.uniformMatrix4fv(mat, false, mixMatrix(mixMatrix(perspective, vm), rotate));\n    gl.drawElements(gl.TRIANGLES, indices.length, gl.UNSIGNED_BYTE, 0);\n    requestAnimationFrame(draw);\n  }\n  draw();\n`;\nconst { renderWebgl } = require(\"../../src/display.js\");\nconst path = require('path');\nconst libs = getLibs(path.resolve(__dirname, \"../../src/libs.js\"));\nrenderWebgl(vertex_code, fragment_code, js_code, libs);\n"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "",
                                ""
                            ]
                        }
                    ]
                },
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.error",
                            "value": {
                                "name": "ReferenceError",
                                "message": "getLibs is not defined",
                                "stack": "    at <Cell 22> [113, 0]\n    at <Cell 22> [114, 46]\n    at Script.runInContext (node:vm:139:12)\n    at Script.runInNewContext (node:vm:144:17)\n    at Object.runInNewContext (node:vm:298:38)\n    at C (d:\\Users\\hujin\\.vscode\\extensions\\donjayamanne.typescript-notebook-2.0.6\\out\\extension\\server\\index.js:2:113345)\n    at t.execCode (d:\\Users\\hujin\\.vscode\\extensions\\donjayamanne.typescript-notebook-2.0.6\\out\\extension\\server\\index.js:2:114312)\n    at k.<anonymous> (d:\\Users\\hujin\\.vscode\\extensions\\donjayamanne.typescript-notebook-2.0.6\\out\\extension\\server\\index.js:2:142156)\n    at k.emit (node:events:527:28)\n    at k.emit (node:domain:475:12)"
                            }
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "世界矩阵 world matrix (或者有时被成为模型矩阵 model matrix)\r\n\r\n转换模型顶点到世界空间的矩阵\r\n\r\n相机矩阵 camera matrix\r\n\r\n代表相机在世界空间中位置的矩阵。另一种说法是相机的世界矩阵。\r\n\r\n视图矩阵 view matrix\r\n\r\n把世界空间中所有东西移到相机前。这是相机矩阵的逆。\r\n\r\n投影矩阵 projection matrix\r\n\r\n矩阵转换视锥体空间到裁剪空间或者一些正交空间到裁剪空间。 另一种说法是你的矩阵数学库透视函数perspective和正交函数ortho或者 orthographic返回的矩阵。\r\n\r\n本地矩阵 local matrix\r\n\r\n当使用场景图时，本地矩阵是是某一节点和其他节点相乘之前的矩阵。"
            ],
            "outputs": []
        }
    ]
}