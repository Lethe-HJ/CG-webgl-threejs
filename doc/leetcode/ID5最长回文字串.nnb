{
    "cells": [
        {
            "language": "markdown",
            "source": [
                "## 最长回文子串\n\n给你一个字符串 s，找到 s 中最长的回文子串。\n\n如果字符串的反序与原始字符串相同，则该字符串称为回文字符串。\n\n示例 1：\n\n输入：s = \"babad\"\n输出：\"bab\"\n解释：\"aba\" 同样是符合题意的答案。\n示例 2：\n\n输入：s = \"cbbd\"\n输出：\"bb\"\n \n\n提示：\n\n1 <= s.length <= 1000\ns 仅由数字和英文字母组成"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "/**\n * @param {string} s\n * @return {string}\n */\nvar longestPalindrome = function (s) {\n    if (s.length < 2) {\n        return s\n    }\n    let l = 0;\n    let r = 0\n    for (let i = 0; i < s.length; i++) {\n        // 回文子串长度是奇数\n        helper(i, i)\n        // 回文子串长度是偶数\n        helper(i, i + 1)\n    }\n\n    function helper(m, n) {\n        while (m >= 0 && n < s.length && s[m] == s[n]) {\n            m--\n            n++\n        }\n        // 注意此处m,n的值循环完后  是恰好不满足循环条件的时刻 如果此轮询得到回文串长度大于之前记录， 记录此轮循边界\n        if (n - m - 1 > r - l - 1) {\n            r = n\n            l = m\n        }\n    }\n    return s.slice(l + 1, r)\n};\n"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "/**\n * @param {string} s\n * @return {string}\n */\nvar longestPalindrome = function (s) {\n    let max = 0 // 当前最大回文串的长度\n    let start = -1 // 当前最大回文串的起始索引\n    const len = s.length // s 的长度\n    for (let i = 0; i < len; i++) { // 遍历 s\n        let now = 1 // 当前回文串的长度\n        let l = i - 1 // 左侧开始遍历的指针\n        while (s[i + 1] === s[i]) { // 如果当前字符后边的字符都一样, 当前长度 + 1,  s遍历指针向后推\n            now++\n            i++\n        }\n        let r = i + 1 // 获取右侧开始遍历的指针\n        while (s[l] === s[r] && s[l] !== undefined) {  // 从连续字符两端开始像两侧扩展,直到越界或者不一致,一致的直接累积到当前长度中,修改左右指针\n            now += 2\n            l--\n            r++\n        }\n        if (now > max) { // 判断与之前最大的对比,更新当前最大回文串的起始索引\n            max = now\n            start = l + 1\n        }\n    }\n    return s.slice(start, start + max) // 通过最大长度和起始索引,获取需要的字符串\n};\n\n"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "### 动态规划解法\n状态定义\ndp[i,j]：字符串s从索引i到j的子串是否是回文串\ntrue： s[i,j] 是回文串\nfalse：s[i,j] 不是回文串\n转移方程\ndp[i][j] = dp[i+1][j-1] && s[i] == s[j]\ns[i] == s[j]：说明当前中心可以继续扩张，进而有可能扩大回文串的长度\ndp[i+1][j-1]：true\n说明s[i,j]的**子串s[i+1][j-1]**也是回文串\n说明，i是从最大值开始遍历的，j是从最小值开始遍历的\n特殊情况\nj - i < 2：意即子串是一个长度为0或1的回文串\n总结\ndp[i][j] = s[i] == s[j] && ( dp[i+1][j-1] || j - i < 2)"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "/**\n * @param {string} s\n * @return {string}\n */\nvar longestPalindrome = function (s) {\n    let n = s.length;\n    let res = \"\";\n    let dp = Array.from(new Array(n), () => new Array(n).fill(0));\n    for (let i = n - 1; i >= 0; i--) {\n        for (let j = i; j < n; j++) {\n            dp[i][j] = s[i] == s[j] && (j - i < 2 || dp[i + 1][j - 1]);\n            if (dp[i][j] && j - i + 1 > res.length) {\n                res = s.substring(i, j + 1);\n            }\n        }\n    }\n    return res;\n};"
            ],
            "outputs": []
        }
    ]
}