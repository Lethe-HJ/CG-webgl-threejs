{
    "cells": [
        {
            "language": "markdown",
            "source": [
                "# node nootbook的使用\r\n\r\n## 1. 安装插件\r\n\r\n安装以下vscode插件\r\n1. js-in-string\r\n2. inline-html\r\n3. Node.js Notebooks\r\n\r\n## 2. 简单使用\r\n\r\n### 2.1 执行nodejs"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const word  = \"hello world\";\r\nconsole.log(word);"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "hello world",
                                "",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "代码块之间会被相互影响"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "console.log(word) "
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "hello world",
                                "",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "### 2.2 web环境下的执行"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "{\r\n    const { display } = require(\"node-kernel\");\r\n    const html = /*html*/ `\r\n        <button style=\"color:red\">hello world</button>\r\n    `;\r\n    display.html(html);\r\n} // 包裹花括号是为了 独立出这个作用域 避免影响global"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "text/html",
                            "value": [
                                "<style> table, th, tr { text-align: left; }</style>",
                                "        <button style=\"color:red\">hello world</button>",
                                "    "
                            ]
                        }
                    ]
                },
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "javascript",
            "source": [
                "const { display } = require(\"node-kernel\");\r\nconst import_map = {\r\n  imports: {\r\n    three: \"../../node_modules/three/build/three.module.js\",\r\n    \"three/addons/\": \"../../node_modules/three/examples/jsm/\"\r\n  },\r\n};\r\nconst js = /*js*/`\r\n  import * as THREE from 'three';\r\n  import { OrbitControls } from 'three/addons/controls/OrbitControls.js';\r\n  const scene = new THREE.Scene();\r\n  const container = document.querySelector(\"#code_cell1\");\r\n  const camera = new THREE.PerspectiveCamera( 75, container.clientWidth / container.clientHeight, 0.1, 1000 );\r\n\r\n  const renderer = new THREE.WebGLRenderer({alpha: true});\r\n\r\n  renderer.setSize( container.clientWidth, container.clientHeight );\r\n  container.appendChild( renderer.domElement );\r\n\r\n  const axesHelper = new THREE.AxesHelper(5);\r\n  scene.add(axesHelper);\r\n\r\n  const material = new THREE.MeshBasicMaterial( { color: 0x00ff00 } );\r\n  // 创建平面\r\n  const floor_geometry = new THREE.PlaneGeometry(1,1,64,64);\r\n  const floor = new THREE.Mesh( floor_geometry, material );\r\n  scene.add( floor );\r\n\r\n  camera.position.z = 5;\r\n\r\n\r\n  function animate() {\r\n      requestAnimationFrame(animate);\r\n      // 使用渲染器渲染相机看这个场景的内容渲染出来\r\n      renderer.render(scene, camera);\r\n  }\r\n  animate();\r\n`;\r\nconst html = /*html*/ `\r\n    <div id=\"code_cell1\" style=\"width:600px;height:600px;position:relative;\"></div>\r\n    <script async src=\"https://unpkg.com/es-module-shims@1.8.0/dist/es-module-shims.js\"></script>\r\n    <script type=\"importmap-shim\">${JSON.stringify(import_map)}</script>\r\n    <script type=\"module-shim\"> ${js} </script>\r\n`;\r\ndisplay.html(html);"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "text/html",
                            "value": [
                                "<style> table, th, tr { text-align: left; }</style>",
                                "    <div id=\"code_cell1\" style=\"width:600px;height:600px;position:relative;\"></div>",
                                "    <script async src=\"https://unpkg.com/es-module-shims@1.8.0/dist/es-module-shims.js\"></script>",
                                "    <script type=\"importmap-shim\">{\"imports\":{\"three\":\"../../node_modules/three/build/three.module.js\",\"three/addons/\":\"../../node_modules/three/examples/jsm/\"}}</script>",
                                "    <script type=\"module-shim\"> ",
                                "  import * as THREE from 'three';",
                                "  import { OrbitControls } from 'three/addons/controls/OrbitControls.js';",
                                "  const scene = new THREE.Scene();",
                                "  const container = document.querySelector(\"#code_cell1\");",
                                "  const camera = new THREE.PerspectiveCamera( 75, container.clientWidth / container.clientHeight, 0.1, 1000 );",
                                "",
                                "  const renderer = new THREE.WebGLRenderer({alpha: true});",
                                "",
                                "  renderer.setSize( container.clientWidth, container.clientHeight );",
                                "  container.appendChild( renderer.domElement );",
                                "",
                                "  const axesHelper = new THREE.AxesHelper(5);",
                                "  scene.add(axesHelper);",
                                "",
                                "  const material = new THREE.MeshBasicMaterial( { color: 0x00ff00 } );",
                                "  // 创建平面",
                                "  const floor_geometry = new THREE.PlaneGeometry(1,1,64,64);",
                                "  const floor = new THREE.Mesh( floor_geometry, material );",
                                "  scene.add( floor );",
                                "",
                                "  camera.position.z = 5;",
                                "",
                                "",
                                "  function animate() {",
                                "      requestAnimationFrame(animate);",
                                "      // 使用渲染器渲染相机看这个场景的内容渲染出来",
                                "      renderer.render(scene, camera);",
                                "  }",
                                "  animate();",
                                " </script>",
                                ""
                            ]
                        }
                    ]
                },
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "### 2.3 devTool的使用\r\n\r\n和浏览器环境类似vscode也有开发者工具窗口\r\nvscode上方的菜单 => 帮助 => 切换开发人员工具\r\n即可打开devtool\r\n我们可以在这里面看得到详细的报错信息和调试信息"
            ],
            "outputs": []
        }
    ]
}